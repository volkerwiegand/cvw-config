#!/bin/bash
# vim: set ts=8 tw=0 noet :

#################################################################################
######
###### cvw_backup - Backup handling (files and/or MySQL databases)
######              (internal service functions)
######
###### (c) 2016-2019 Volker Wiegand <volker.wiegand@cvw.de>
######               This file is part of "CVW Config"
######               See LICENSE for copyright information
######
#################################################################################

# Exit on error
set -e -o pipefail

# Remember the args
_prog=${0##*/}
_args="$*"


# Prepare for backup
_mynames=""
_dbpass=""
_dbuser=""

_fqdn=$(cvw_xml -r host/fqdn)
[[ -s /tmp/cvw/error ]] && exit 1


function usage
{
	rm -rf /tmp/cvw_error
	cat >/tmp/cvw_error <<-EOF
		Syntax: $_prog [options] app dir ...  Install backup
		    or: $_prog -s                     Print summary
		    or: $_prog -z app                 Remove scripts for app
		Options:
		    -m name   MySQL database name (multiple allowed)
		    -p pass   Password for database (one for all)
		    -u user   Username for database (one for all)
		Called with: '$_prog $_args'
	EOF

	if [[ -d /tmp/cvw ]] ; then
		cat /tmp/cvw_error >>/tmp/cvw/error
	else
		cat /tmp/cvw_error >&2
	fi
	rm -f /tmp/cvw_error

	exit 1
}


while getopts ":m:p:su:z:" opt ; do
	case $opt in
		m)
			_mynames="$_mynames $OPTARG"
		;;

		p)
			_dbpass=$OPTARG
		;;

		s)
			cvw_say -h "Backup summary"
			for _cmd in $(find /usr/local/bin -name "bkup.*") ; do
				cvw_say -s "cvw -l $_cmd -v"
			done
			exit
		;;

		u)
			_dbuser=$OPTARG
		;;

		z)
			rm -f /etc/logrotate.d/$OPTARG
			rm -f /usr/local/bin/bkup.$OPTARG
			rm -f /etc/cron.daily/bkup.$OPTARG
			rm -f /usr/local/bin/rstr.$OPTARG
			exit 0
		;;

		\?)
			usage
		;;
	esac
done
shift $(($OPTIND-1))

_app=$1
[[ $_app ]] || usage
shift

[[ -n $_mynames && -z $_dbuser ]] && cvw_say -f "$_app bkup: missing database username"
[[ -n $_mynames && -z $_dbpass ]] && cvw_say -f "$_app bkup: missing database password"

_bdir="/var/local/backup/$_app"
_bkup="/etc/cron.daily/bkup.$_app"
_rstr="/usr/local/bin/rstr.$_app"

cat >$_bkup.tmp_VW <<-EOF
	#!/bin/bash

	if [[ \$1 == -v ]] ; then
	  _verbose=1
	  shift
	fi

	_dest=$_bdir/backup
	[[ \$_verbose ]] && echo "Backing up to \$_dest"

	/bin/rm -rf \$_dest
	/bin/mkdir -p \$_dest
	_result=\$?
	if [[ \$_result -ne 0 ]] ; then
	  /usr/bin/logger -t $_app "ALERT mkdir exited with \$_result"
	  exit 1
	fi
EOF

for _myname in $_mynames ; do
	cat >>$_bkup.tmp_VW <<-EOF

		_file="\$_dest/$_myname.sql"
		/bin/rm -rf \$_file
		/usr/bin/mysqldump -u$_dbuser -p$_dbpass $_myname >\$_file
		_result=\$?
		[[ \$_verbose ]] && echo "Finished database $_myname (\$_result)"
		if [[ \$_result -ne 0 ]] ; then
		  /usr/bin/logger -t $_app "ALERT mysqldump $_myname exited with \$_result"
		  exit 1
		fi
	EOF
done

for _entry in $* ; do
	cat >>$_bkup.tmp_VW <<-EOF

		if [[ -d $_entry ]] ; then
		  /usr/bin/rsync -aqz --delete $_entry/ \$_dest/${_entry##*/}
		  _result=\$?
		  [[ \$_verbose ]] && echo "Finished dir $_entry (\$_result)"
		  if [[ \$_result -ne 0 ]]; then
		    /usr/bin/logger -t $_app "ALERT rsync $_entry exited with \$_result"
		    exit 1
		  fi
		fi
	EOF
done

cat >>$_bkup.tmp_VW <<-EOF

	/bin/rm -rf \$_dest.7
	[[ -d \$_dest.6 ]] && /bin/mv \$_dest.6 \$_dest.7
	[[ -d \$_dest.5 ]] && /bin/mv \$_dest.5 \$_dest.6
	[[ -d \$_dest.4 ]] && /bin/mv \$_dest.4 \$_dest.5
	[[ -d \$_dest.3 ]] && /bin/mv \$_dest.3 \$_dest.4
	[[ -d \$_dest.2 ]] && /bin/mv \$_dest.2 \$_dest.3
	[[ -d \$_dest.1 ]] && /bin/mv \$_dest.1 \$_dest.2
	[[ -d \$_dest.0 ]] && /bin/mv \$_dest.0 \$_dest.1

	if [[ -d \$_dest.1 ]] ; then
	  /usr/bin/rsync -aqz --delete --exclude=lost+found --link-dest=\$_dest.1 \$_dest/ \$_dest.0
	else
	  /usr/bin/rsync -aqz --delete --exclude=lost+found \$_dest/ \$_dest.0
	fi

	[[ \$_verbose ]] && /usr/bin/du -hs \$_dest.?
	/bin/rm -rf \$_dest
	[[ \$_verbose ]] && exit 0

	# Save to background (Storage Box) if enabled
	if mount | grep -q /var/backup ; then
	  mkdir -p /var/backup/$_app

	  _weekdaily=/var/backup/$_app/backup.\$(LANG=C date +%A).tgz
	  /usr/bin/tar -c -z -f \$_weekdaily -C \$_dest.0 --warning=no-file-ignored .
	  _result=\$?
	  if [[ \$_result -ne 0 ]]; then
	    /usr/bin/logger -t $_app "ALERT tar \$_weekdaily exited with \$_result"
	    exit 1
	  fi

	  _monthly=/var/backup/$_app/backup.\$(LANG=C date +%B).tgz
	  if [[ ! -s \$_monthly ]] ; then
	    /usr/bin/tar -c -z -f \$_monthly -C \$_dest.0 --warning=no-file-ignored .
	    _result=\$?
	    if [[ \$_result -ne 0 ]]; then
	      /usr/bin/logger -t $_app "ALERT tar \$_monthly exited with \$_result"
	      exit 1
	    fi
	  fi
	fi

	exit 0
EOF
cvw_file -m 0775 -v $_bkup
ln -nfs $_bkup /usr/local/bin/bkup.$_app


_rstr="/usr/local/bin/rstr.$_app"
cat >$_rstr.tmp_VW <<-EOF
	#!/bin/bash

	_dest=$_bdir/backup.0
	if [[ ! -d \$_dest ]] ; then
	  echo "No backup for $_app -- abort" >&2
	  exit 1
	fi
EOF

for _myname in $_mynames ; do
	cat >>$_rstr.tmp_VW <<-EOF

		_file="\$_dest/$_myname.sql"
		if [[ -s \$_file ]] ; then
		  echo "Restoring $_myname database"
		  cat \$_file | /usr/bin/mysql -u$_dbuser -p$_dbpass $_myname
		  _result=\$?
		  echo "Finished database $_myname (\$_result)"
		  sleep 5
		fi
	EOF
done

for _entry in $* ; do
	cat >>$_rstr.tmp_VW <<-EOF

		if [[ -d \$_dest/${_entry##*/} ]] ; then
		  echo "Restoring $_entry"
		  /usr/bin/rsync -aqz --delete \$_dest/${_entry##*/}/ $_entry
		  _result=\$?
		  echo "Finished $_entry (\$_result)"
		  sleep 5
		fi
	EOF
done

cat >>$_rstr.tmp_VW <<-EOF

	exit 0
EOF
cvw_file -m 0775 -v $_rstr

exit 0

