#!/bin/bash
# vim: set ts=8 tw=0 noet :

#################################################################################
######
###### cvw_borgserver - Install or remove BorgBackup (as server)
######                  https://www.borgbackup.org/
######                  https://borgbackup.readthedocs.io/en/stable/installation.html
######                  https://thomas-leister.de/server-backups-mit-borg/
######
###### (c) 2016-2019 Volker Wiegand <volker.wiegand@cvw.de>
######               This file is part of "CVW Config"
######               See LICENSE for copyright information
######
#################################################################################

# Exit on error
set -e -o pipefail

# Remember the args
_prog=${0##*/}
_args="$*"
_name="BorgBackup Server"
_slug="borgserver"


function usage
{
	rm -rf /tmp/cvw_error
	cat >/tmp/cvw_error <<-EOF
		Syntax: $_prog -i   Install or remove $_name
		    or: $_prog -g   Generate config template
		Called with: '$_prog $_args'
	EOF

	if [[ -d /tmp/cvw ]] ; then
		cat /tmp/cvw_error >>/tmp/cvw/error
	else
		cat /tmp/cvw_error >&2
	fi
	rm -f /tmp/cvw_error

	exit 1
}


function borgserver_generate
{
	cat <<-EOF
	    <borgserver active="true">
	      <client id="www.example.com" active="true">
	        <passphrase>secret_for_www</passphrase>
	      </client>
	      <client id="mail.example.com" active="true">
	        <passphrase>secret_for_mail</passphrase>
	      </client>
	    </borgserver>

	EOF
	exit 0
}


function borgserver_add_client
{
	local _id="$1"
	local _base="software/$_slug/client:$_id"
	local _host=$(cvw_xml -r $_base/host)
	local _pass=$(cvw_xml -r $_base/passphrase)
	local _home=$(cvw_user -h borg)
	[[ -s /tmp/cvw/error ]] && exit 1
	local _pkey="/var/local/cfg/files/$_slug/$_host"
	local _path="$_home/repos/$_host"
	local _cmnd

	[[ -s $_pkey ]] || continue
	cvw_say -s "backing up client $_host"

	if [[ ! -d $_path ]] ; then
		cvw_user -r borg "BORG_PASSPHRASE='$_pass' borg init --encryption=repokey --make-parent-dirs $_path"
	fi

	if ! grep -q -s $_host $_home/.ssh/authorized_keys ; then
		# cat $_pkey >>$_home/.ssh/authorized_keys
		_cmnd="borg serve --restrict-to-path $_path --append-only"
		echo "command=\"$_cmnd\" $(cat $_pkey)" >>$_home/.ssh/authorized_keys
		chown borg:borg $_home/.ssh/authorized_keys
	fi
}


function borgserver_install
{
	cvw_say -h "Installing $_name"
	local _home=$(cvw_user -h borg)
	[[ -s /tmp/cvw/error ]] && exit 1
	cvw_user -s borg
	local _id

	cvw_rpm -i borgbackup

	if [[ ! -d $_home/.ssh ]] ; then
		cvw_user -r borg "install -d -m 0700 $_home/.ssh"
	fi

	rm -f $_home/.ssh/authorized_keys
	cvw_xml -i software/$_slug/client | sort | while read _id ; do
		borgserver_add_client $_id
	done

	cvw_say -o "$_slug:server"
}


function borgserver_remove
{
	id borg >/dev/null 2>&1
	if [[ $? -eq 0 ]] ; then
		cvw_say -h "Removing $_name"
		cvw_user -z borg
		if ! cvw_xml -a software/borgclient ; then
			cvw_rpm -e borgbackup
		fi
		cvw_say -o "$_slug:remove"
	fi
}


while getopts ":ig" opt ; do
	case $opt in
		i)
			if cvw_xml -a software/$_slug ; then
				borgserver_install
			else
				borgserver_remove
			fi
			exit 0
		;;

		g)
			borgserver_generate
			exit 0
		;;

		\?)
			usage
		;;
	esac
done
shift $(($OPTIND-1))

usage

