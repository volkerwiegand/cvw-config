#!/bin/bash
# vim: set ts=8 tw=0 noet :

#################################################################################
######
###### cvw_nginx - Install or remove Nginx
######             http://nginx.org/
######             https://www.sherbers.de/howto/nginx/ (for Ciphers)
######
###### (c) 2016-2020 Volker Wiegand <volker.wiegand@cvw.de>
######               This file is part of "CVW Config"
######               See LICENSE for copyright information
######
#################################################################################

# Exit on error
set -e -o pipefail

# Remember the args
_prog=${0##*/}
_args="$*"
_name="Nginx"
_slug="nginx"


#VW _CONF_FILE="/etc/nginx/conf.d/server.conf"
_CONF_FILE="/etc/nginx/nginx.conf"
_ROOT_DIR="/usr/share/nginx/html"


function usage
{
	rm -rf /tmp/cvw_error
	cat >/tmp/cvw_error <<-EOF
		Syntax: $_prog -i             Install or remove $_name
		    or: $_prog -x             Execute and cleanup
		Called with: '$_prog $_args'
	EOF

	if [[ -d /tmp/cvw ]] ; then
		cat /tmp/cvw_error >>/tmp/cvw/error
	else
		cat /tmp/cvw_error >&2
	fi
	rm -f /tmp/cvw_error

	exit 1
}


function nginx_initial
{
	cvw_say -h "Installing $_name"
	cvw_xml -a software/certbot || cvw_say -f "$_prog: requires certbot"
	local _fqdn=$(cvw_xml -r host/fqdn)
	local _port=$(cvw_xml -R software/$_slug/port "80")
	local _ssl_port=$(cvw_xml -R software/$_slug/ssl_port "443")
	local _ciphers=$(cvw_xml -R software/$_slug/ciphers "HIGH:!aNULL:!MD5")
	[[ -s /tmp/cvw/error ]] && exit 1
	local _cert="/etc/letsencrypt/live/$_fqdn"
	[[ -s $_cert/cert.pem ]] || cvw_say -f "missing SSL cert"
	local _proxy _base _uri _path _cport

	cvw_yum -a nginx
	cvw_rpm -i nginx
	cvw_service -s nginx

	cvw_file -b $_CONF_FILE
	cat >$_CONF_FILE.tmp_VW <<-EOF
		user nginx;
		worker_processes auto;
		error_log /var/log/nginx/error.log;
		pid /run/nginx.pid;

		# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
		include /usr/share/nginx/modules/*.conf;

		events {
		    worker_connections 1024;
		}

		http {
		    log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
		                      '\$status \$body_bytes_sent "\$http_referer" '
		                      '"\$http_user_agent" "\$http_x_forwarded_for"';

		    access_log  /var/log/nginx/access.log  main;

		    sendfile            on;
		    tcp_nopush          on;
		    tcp_nodelay         on;
		    keepalive_timeout   65;
		    types_hash_max_size 2048;
		    server_names_hash_bucket_size 128;

		    include             /etc/nginx/mime.types;
		    default_type        application/octet-stream;

		    server {
		      listen      $_port default_server;
		      listen      [::]:$_port default_server;
		      server_name _;
		      return      301 https://\$host\$request_uri;
		    }

		    server {
		      listen              $_ssl_port ssl default_server;
		      ssl_certificate     $_cert/fullchain.pem;
		      ssl_certificate_key $_cert/privkey.pem;
		      ssl_session_timeout 5m;
		      ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
		      ssl_prefer_server_ciphers on;
		      ssl_session_cache   shared:SSL:10m;
		      ssl_dhparam         /etc/pki/tls/dhparam.pem;
		      ssl_ciphers         "$_ciphers";

		      server_name         _;
		      root                $_ROOT_DIR;
		      index               index.html index.htm index.php;
		      fastcgi_buffers     64 4K;
		      client_max_body_size 2G;

		      location = /robots.txt    { allow all; access_log off; log_not_found off; }
		      location = /favicon.ico   { allow all; access_log off; log_not_found off; }	
		      location ~ /\\.ht          { deny  all; access_log off; log_not_found off; }
		      location ~ ^/\\.well-known { allow all; }
	EOF

	for _proxy in $(cvw_xml -i software/nginx/proxy) ; do
		_base="software/nginx/proxy:$_proxy"
		_uri=$(cvw_xml -r $_base/uri)
		_cport=$(cvw_xml -r $_base/port)
		[[ -s /tmp/cvw/error ]] && exit 1
		cvw_say -s "proxy: $_proxy [$_uri -> $_cport]"

		if [[ $_uri == "/" ]] ; then
			echo '' >>$_CONF_FILE.tmp_VW
			_path=""
		elif [[ ${_uri%/} == $_uri ]] ; then
			echo '' >>$_CONF_FILE.tmp_VW
			_path=""
		else
			cat >>$_CONF_FILE.tmp_VW <<-EOF

				  location = $_uri {
				    return 302 $_uri/;
				  }
			EOF
			_path="$_uri/"
		fi
		cat >>$_CONF_FILE.tmp_VW <<-EOF
			      location $_uri {
			        proxy_set_header Host \$host;
			        proxy_set_header X-Real-IP \$remote_addr;
			        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
			        proxy_set_header X-Forwarded-Proto \$scheme;
			        proxy_set_header X-Proto \$scheme;
			        proxy_pass       http://127.0.0.1:$_cport$_path;
			      }
		EOF
	done

	[[ -s /tmp/cvw/error ]] && exit 1

	cvw_say -o "$_slug:initial"
}


function nginx_finish
{
	cvw_say -h "Finishing Nginx"
	local _port=$(cvw_xml -R software/$_slug/port "80")
	local _ssl_port=$(cvw_xml -R software/$_slug/ssl_port "443")
	[[ -s /tmp/cvw/error ]] && exit 1

	cat >>$_CONF_FILE.tmp_VW <<-EOF
		    }
		}
	EOF
	cvw_file -v $_CONF_FILE nginx

	[[ -s /tmp/cvw/error ]] && exit 1
	nginx -t >/tmp/cvw/error 2>&1
	if grep -q failed /tmp/cvw/error ; then
		exit 1
	else
		rm -f /tmp/cvw/error
	fi

	if cvw_xml -t software/$_slug/public ; then
		cvw_firewall -t $_port
		cvw_firewall -t $_ssl_port
	fi

	cvw_say -o "$_slug:finish"
}


function nginx_remove
{
	if cvw_rpm -c nginx ; then
		cvw_say -h "Removing Nginx"
		cvw_service -d nginx
		cvw_rpm -e nginx
		# rpm erase nginx-release-centos-7-0
		rm -rf /etc/nginx /usr/share/nginx
		cvw_say -o "$_slug:remove"
	fi
}


while getopts ":e:ixy:" opt ; do
	case $opt in
		e)
			cvw_xml -a software/$_slug || exit 0
			cvw_say -s "conf.d: $OPTARG"
			rm -f /etc/nginx/conf.d/$OPTARG.conf.disabled
			echo "/etc/nginx/conf.d/$OPTARG.conf" >>/tmp/cvw/nginx.enabled
			exit 0
		;;

		i)
			if cvw_xml -a software/$_slug ; then
				nginx_initial
			else
				nginx_remove
			fi
			exit 0
		;;

		x)
			if cvw_xml -a software/$_slug ; then
				nginx_finish
			fi
			exit 0
		;;

		y)
			_proxy=$OPTARG
		;;

		\?)
			usage
		;;
	esac
done
shift $(($OPTIND-1))

if [[ $_proxy ]] ; then
	[[ $# -eq 1 ]] || usage
	nginx_add_proxy $_proxy $1
	exit
fi

usage

