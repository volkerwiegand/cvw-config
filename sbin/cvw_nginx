#!/bin/bash
# vim: set ts=8 tw=0 noet :

#################################################################################
######
###### cvw_nginx - Install or remove Nginx
######             http://nginx.org/
######
###### (c) 2016-2017 Volker Wiegand <volker.wiegand@cvw.de>
######               This file is part of "CVW Config"
######               See LICENSE for copyright information
######
######          TODO setup nginx and all apps (currently only with docker)
######          TODO erase nginx-release-centos-7-0 RPM
######
#################################################################################

# Exit on error
set -e -o pipefail

# Remember the args
_prog=${0##*/}
_args="$*"
_name="Nginx"
_slug="nginx"


_CONF_FILE="/etc/nginx/conf.d/server.conf"
_ROOT_DIR="/usr/share/nginx/html"


function usage
{
	rm -rf /tmp/cvw_error
	cat >/tmp/cvw_error <<-EOF
		Syntax: $_prog -i             Install or remove $_name
		    or: $_prog -e file        Enable conf.d/file.conf
		    or: $_prog -p base        Add PHP block for (XML) base
		    or: $_prog -x             Execute and cleanup
		    or: $_prog -y base port   Add proxy block for (XML) base
		Called with: '$_prog $_args'
	EOF

	if [[ -d /tmp/cvw ]] ; then
		cat /tmp/cvw_error >>/tmp/cvw/error
	else
		cat /tmp/cvw_error >&2
	fi
	rm -f /tmp/cvw_error

	exit 1
}


function nginx_add_php
{
	return 0	# FIXME

	local _base=$1
	local _uri=$(cvw_xml -r software/$_base/uri)
	local _nginx=$(cvw_xml -r system/app_root)/$_slug
	[[ -s /tmp/cvw/error ]] && exit 1
	[[ -s $_CONF_FILE.tmp_VW ]] || cvw_say -f "$_prog: missing $_CONF_FILE.tmp_VW"
	local _opts="/tmp/cvw/nginx.options"

	[[ $_uri != "/" ]] && ln -nfs $_ROOT_DIR $_nginx$_uri

	cat >>$_CONF_FILE.tmp_VW <<-EOF

		  location ^~ $_uri {
	EOF

	if [[ -s $_opts ]] ; then
		cat $_opts >>$_CONF_FILE.tmp_VW
	fi

	cat >>$_CONF_FILE.tmp_VW <<-EOF
		    try_files \$uri \$uri/ \$uri/index.php;
		    location ~* \\.php {
		      fastcgi_split_path_info ^(.+?\\.php)(/.+)?\$;
		      include        fastcgi_params;
		      fastcgi_index  index.php;
		      fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
		      fastcgi_param  modHeadersAvailable true;
		      fastcgi_pass   127.0.0.1:9000;
		    }
		  }
	EOF

	rm -f $_opts
}


function nginx_add_proxy
{
	local _base=$1
	local _port=$2
	local _uri=$(cvw_xml -r software/$_base/uri)
	[[ -s /tmp/cvw/error ]] && exit 1
	[[ -s $_CONF_FILE.tmp_VW ]] || cvw_say -f "$_prog: missing $_CONF_FILE.tmp_VW"

	cat >>$_CONF_FILE.tmp_VW <<-EOF

		  location $_uri {
		    proxy_set_header Host \$host;
		    proxy_set_header X-Real-IP \$remote_addr;
		    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
		    proxy_set_header X-Forwarded-Proto \$scheme;
		    proxy_pass       http://127.0.0.1:$_port;
		  }
	EOF
}


function nginx_initial
{
	cvw_say -h "Installing $_name"
	cvw_xml -a software/certbot || cvw_say -f "$_prog: requires certbot"
	local _fqdn=$(cvw_xml -r host/fqdn)
	local _port=$(cvw_xml -r software/$_slug/port)
	local _ssl_port=$(cvw_xml -r software/$_slug/ssl_port)
	local _ciphers=$(cvw_xml -r software/$_slug/ciphers)
	[[ -s /tmp/cvw/error ]] && exit 1
	local _cert="/etc/letsencrypt/live/$_fqdn"
	[[ -s $_cert/cert.pem ]] || cvw_say -f "missing SSL cert"
	local _file _container _base _uri _path _cport

	cvw_yum -a nginx
	cvw_rpm -i nginx
	cvw_service -s nginx

	_file="/etc/nginx/nginx.conf"
	cvw_file -e $_file "s/\(worker_processes\).*/\1 auto;/" nginx

	_file="/etc/nginx/conf.d/http.conf"
	cat >$_file.tmp_VW <<-EOF
		server {
		  listen      $_port default_server;
		  listen      [::]:$_port default_server;
		  server_name _;
		  return      301 https://\$host\$request_uri;
		}
	EOF
	cvw_file -v $_file nginx
	echo $_file >>/tmp/cvw/nginx.enabled

	cat >$_CONF_FILE.tmp_VW <<-EOF
	server {
		  listen              $_ssl_port ssl default_server;
		  ssl_certificate     $_cert/fullchain.pem;
		  ssl_certificate_key $_cert/privkey.pem;
		  ssl_session_timeout 5m;
		  ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
		  ssl_prefer_server_ciphers on;
		  ssl_session_cache   shared:SSL:10m;
		  ssl_dhparam         /etc/pki/tls/dhparam.pem;
		  ssl_ciphers         "$_ciphers";

		  server_name         _;
		  root                $_ROOT_DIR;
		  index               index.html index.htm index.php;
		  fastcgi_buffers     64 4K;
		  client_max_body_size 2G;

		  location = /robots.txt    { allow all; access_log off; log_not_found off; }
		  location = /favicon.ico   { allow all; access_log off; log_not_found off; }	
		  location ~ /\\.ht          { deny  all; access_log off; log_not_found off; }
		  location ~ ^/\\.well-known { allow all; }
	EOF

	if cvw_xml -a software/docker ; then
		for _container in $(cvw_xml -i software/docker/container) ; do
			_base="software/docker/container:$_container"
			cvw_xml -t $_base/$_slug || continue
			cvw_say -s "container: $_container"
			_uri=$(cvw_xml -r $_base/uri)
			_cport=$(cvw_xml -r $_base/port)
			[[ -s /tmp/cvw/error ]] && exit 1

			if [[ $_uri == "/" ]] ; then
				echo '' >>$_CONF_FILE.tmp_VW
				_path=""
			elif [[ ${_uri%/} == $_uri ]] ; then
				echo '' >>$_CONF_FILE.tmp_VW
				_path=""
			else
				cat >>$_CONF_FILE.tmp_VW <<-EOF

					  location = $_uri {
					    return 302 $_uri/;
					  }
				EOF
				_path="$_uri/"
			fi
			cat >>$_CONF_FILE.tmp_VW <<-EOF
				  location $_uri {
				    proxy_set_header Host \$host;
				    proxy_set_header X-Real-IP \$remote_addr;
				    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
				    proxy_set_header X-Forwarded-Proto \$scheme;
				    proxy_set_header X-Proto \$scheme;
				    proxy_pass       http://127.0.0.1:$_cport$_path;
				  }
			EOF
		done
	fi

	[[ -s /tmp/cvw/error ]] && exit 1

	cvw_say -o "$_slug:initial"
}


function nginx_finish
{
	cvw_say -h "Finishing Nginx"
	local _port=$(cvw_xml -r software/$_slug/port)
	local _ssl_port=$(cvw_xml -r software/$_slug/ssl_port)
	[[ -s /tmp/cvw/error ]] && exit 1
	local _file

	echo "}" >>$_CONF_FILE.tmp_VW
	cvw_file -v $_CONF_FILE nginx
	echo $_CONF_FILE >>/tmp/cvw/nginx.enabled

	find /etc/nginx/conf.d -maxdepth 1 -name "*.conf" | while read _file ; do
		grep -q "^$_file" /tmp/cvw/nginx.enabled && continue
		cvw_file -r $_file nginx
	done
	rm -f /tmp/cvw/nginx.enabled

	[[ -s /tmp/cvw/error ]] && exit 1
	nginx -t >/tmp/cvw/error 2>&1
	if grep -q failed /tmp/cvw/error ; then
		exit 1
	else
		rm -f /tmp/cvw/error
	fi

	if cvw_xml -t software/$_slug/public ; then
		cvw_firewall -t $_port
		cvw_firewall -t $_ssl_port
	fi

	cvw_say -o "$_slug:finish"
}


function nginx_remove
{
	if cvw_service -c nginx ; then
		cvw_say -h "Removing Nginx"

		cvw_service -d nginx
		cvw_rpm -e nginx
		# rpm erase nginx-release-centos-7-0

		rm -rf /etc/nginx /usr/share/nginx

		cvw_say -o "$_slug:remove"
	fi
}


while getopts ":e:ip:xy:" opt ; do
	case $opt in
		e)
			cvw_xml -a software/$_slug || exit 0
			cvw_say -s "conf.d: $OPTARG"
			rm -f /etc/nginx/conf.d/$OPTARG.conf.disabled
			echo "/etc/nginx/conf.d/$OPTARG.conf" >>/tmp/cvw/nginx.enabled
			exit 0
		;;

		i)
			if cvw_xml -a software/$_slug ; then
				nginx_initial
			else
				nginx_remove
			fi
			exit 0
		;;

		p)
			nginx_add_php $OPTARG
			exit 0
		;;

		x)
			if cvw_xml -a software/$_slug ; then
				nginx_finish
			fi
			exit 0
		;;

		y)
			_proxy=$OPTARG
		;;

		\?)
			usage
		;;
	esac
done
shift $(($OPTIND-1))

if [[ $_proxy ]] ; then
	[[ $# -eq 1 ]] || usage
	nginx_add_proxy $_proxy $1
	exit
fi

usage

