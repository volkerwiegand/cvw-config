#!/bin/bash
# vim: set ts=8 tw=0 noet :

#################################################################################
######
###### cvw_certbot - Install or remove Let's Encrypt certbot
######               http://certbot.eff.org/
######
###### (c) 2016-2017 Volker Wiegand <volker.wiegand@cvw.de>
######               This file is part of "CVW Config"
######               See LICENSE for copyright information
######
#################################################################################

# Exit on error
set -e -o pipefail

# Remember the args
_prog=${0##*/}
_args="$*"
_name="Let's Encrypt certbot"
_slug="certbot"


function usage
{
	rm -rf /tmp/cvw_error
	cat >/tmp/cvw_error <<-EOF
		Syntax: $_prog -i   Install or remove $_name
		    or: $_prog -g   Generate config template
		Called with: '$_prog $_args'
	EOF

	if [[ -d /tmp/cvw ]] ; then
		cat /tmp/cvw_error >>/tmp/cvw/error
	else
		cat /tmp/cvw_error >&2
	fi
	rm -f /tmp/cvw_error

	exit 1
}


function certbot_generate
{
	local _fqdn=$(cvw_xml -r host/fqdn)
	local _domain=${_fqdn#*.}

	cat <<-EOF
	    <certbot active="true">
	      <san>autoconfig.$_domain</san>
	      <san>autodiscover.$_domain</san>
	    </certbot>

	EOF
	exit 0
}


function certbot_install
{
	cvw_say -h "Installing $_name"
	local _admin=$(cvw_xml -r host/admin)
	[[ -s /tmp/cvw/error ]] && exit 1
	local _fqdn _live _file _list _san _args

	if cvw_xml -c software/$_slug/fqdn ; then
		_fqdn=$(cvw_xml -r software/$_slug/fqdn)
	else
		_fqdn=$(cvw_xml -r host/fqdn)
	fi
	_live="/etc/letsencrypt/live/$_fqdn"

	cvw_rpm -i certbot

	_file="/var/local/cfg/files/misc/letsencrypt.tar.gz"
	if [[ -s $_file ]] ; then
		cvw_say -s "extracting letsencrypt.tar.gz"
		tar -x -z -C /etc -f $_file
	else
		cvw_say -a "don't forget to save the $_name config -> cvw -Y"
	fi

	# FIXME check why "certbot --webroot" seems to fail
	cvw_xml -a software/apache  && cvw_service -K httpd
	cvw_xml -a software/haproxy && cvw_service -K haproxy
	cvw_xml -a software/bitnami && cvw_service -K bitnami:apache
	cvw_xml -a software/nginx   && cvw_service -K nginx
	# Web server(s) will be re-started after run

	_list="-d $_fqdn"
	[[ $_fqdn =~ ^www\. ]] && _list="$_list -d ${_fqdn#*.}"
	for _san in $(cvw_xml -l software/$_slug/san | sort) ; do
		_list="$_list -d $_san"
		[[ $_san =~ ^www\. ]] && _list="$_list -d ${_san#*.}"
	done
	_args="--standalone --agree-tos --email '$_admin'"
	_args="$_args --keep --text --non-interactive --expand"
	cvw_say -a "certbot certonly $_args $_list"

	if [[ -d $_live ]] ; then
		cvw_say -s "updating web certificate"
		certbot renew --standalone
		_file="/etc/cron.weekly/letsencrypt"
		cat >$_file.tmp_VW <<-EOF
			#!/bin/bash

			/usr/bin/certbot -q renew
			_result=\$?
			if [[ \$_result -ne 0 ]] ; then
			    /usr/bin/logger -p user.err -t letsencrypt "failure"
			else
			    /usr/bin/logger -p user.info -t letsencrypt "success"
			fi
			exit 0
		EOF
		cvw_file -m 0775 -v $_file
	else
		cvw_firewall -t 80
		cvw_firewall -t 443
		certbot certonly $_args $_list
	fi
	[[ -s /tmp/cvw/error ]] && exit 1

	find /etc/letsencrypt -type d -exec chmod 0755 {} \;
	find /etc/letsencrypt -type f -exec chmod 0644 {} \;

	cvw_say -o "$_slug"
}


function certbot_remove
{
	if cvw_rpm -c certbot ; then
		cvw_say -h "Removing $_name"
		cvw_file -r /etc/cron.weekly/letsencrypt
		cvw_rpm -e certbot
		cvw_say -o "$_slug:remove"
	fi
}


while getopts ":ig" opt ; do
	case $opt in
		i)
			if cvw_xml -a software/$_slug ; then
				certbot_install
			else
				certbot_remove
			fi
			exit 0
		;;

		g)
			certbot_generate
			exit 0
		;;

		\?)
			usage
		;;
	esac
done
shift $(($OPTIND-1))

usage

