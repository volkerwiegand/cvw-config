#!/bin/bash
# vim: set ts=8 tw=0 noet :

#################################################################################
######
###### cvw_webdav - Install or remove WebDAV
######              http://sabre.io/dav/
######              http://sabre.io/dav/gettingstarted/
######
###### (c) 2016 Volker Wiegand <volker.wiegand@cvw.de>
######          This file is part of "CVW Config"
######          See LICENSE for copyright information
######
#################################################################################

# Exit on error
set -e -o pipefail

# Remember the args
_prog=${0##*/}
_args="$*"
_name="sabre/dav WebDAV"
_slug="webdav"


function usage
{
	rm -rf /tmp/cvw_error
	cat >/tmp/cvw_error <<-EOF
		Syntax: $_prog -i   Install or remove $_name
		Called with: '$_prog $_args'
	EOF

	if [[ -d /tmp/cvw ]] ; then
		cat /tmp/cvw_error >>/tmp/cvw/error
	else
		cat /tmp/cvw_error >&2
	fi
	rm -f /tmp/cvw_error

	exit 1
}


function webdav_install
{
	cvw_say -h "installing $_name"
	local _root=$(cvw_xml -r system/app_root)/$_slug
	local _uri=$(cvw_xml -r software/$_slug/uri)
	local _user=$(cvw_xml -r software/$_slug/username)
	local _pass=$(cvw_xml -r software/$_slug/password)
	[[ -s /tmp/cvw/error ]] && exit 1
	local _html
	[[ $_uri == "/" ]] && _html="/var/www/html" || _html="$_root$_uri"
	local _conf _file _subdir

	cvw_mysql -c $_slug $_slug $_pass utf8_general_ci
	cvw_backup -m $_slug -u $_slug -p $_pass $_slug \
			$_html/data \
			$_html/public

	cvw_unpack -i $_slug $_html LICENSE
	for _subdir in data public ; do
		mkdir -p $_html/$_subdir
		chown -R apache $_html/$_subdir
	done

	if [[ -d /var/local/backup/$_slug/last/mysql && \
	      -d /var/local/backup/$_slug/last/dirs  && \
	      -x /usr/local/bin/bkup.$_slug          && \
	      -x /usr/local/bin/rstr.$_slug ]] ; then
		cvw_say -s "updating / syncing backup"
		/usr/local/bin/bkup.$_slug
	fi

	_file=$_html/server.php
	cat >$_file.tmp_VW <<-EOF
		<?php

		use Sabre\\DAV;

		// The autoloader
		require 'vendor/autoload.php';

		// Now we're creating a whole bunch of objects
		\$rootDirectory = new DAV\\FS\\Directory('public');

		// The server object is responsible for making sense out of the WebDAV protocol
		\$server = new DAV\\Server(\$rootDirectory);

		// If your server is not on your webroot, make sure the following line has the
		// correct information
		\$server->setBaseUri('${_uri%/}/server.php');

		// The lock manager is reponsible for making sure users don't overwrite
		// each others changes.
		\$lockBackend = new DAV\\Locks\\Backend\\File('data/locks');
		\$lockPlugin = new DAV\\Locks\\Plugin(\$lockBackend);
		\$server->addPlugin(\$lockPlugin);

		// This ensures that we get a pretty index in the browser, but it is
		// optional.
		\$server->addPlugin(new DAV\\Browser\\Plugin());

		// All we need to do now, is to fire up the server
		\$server->exec();

		?>
	EOF
	cvw_file -v $_file httpd nginx php-fpm

	if cvw_xml -a software/nginx ; then
		cvw_nginx -p software/$_slug
	fi

	if cvw_xml -a software/apache ; then
		_conf="/etc/httpd/conf.d/vhost.conf.tmp_VW"
		[[ -s $_conf ]] || cvw_say -f "$_prog: missing $_conf"
		echo "" >>$_conf
		[[ $_uri != "/" ]] && echo "   Alias $_uri $_html" >>$_conf
		cat >>$_conf <<-EOF
			   <IfModule mod_dav.c>
			      <Directory $_html>
			         Dav On
			         Options +Indexes
			         IndexOptions FancyIndexing
			         AddDefaultCharset UTF-8
			         AuthType Basic
			         AuthName "$_name Server"
			         AuthUserFile /etc/httpd/$_slug.users.pwd
			         <Limit GET PUT POST DELETE PROPFIND PROPPATCH MKCOL COPY MOVE LOCK UNLOCK>
			           Require valid-user
			         </Limit>
			      </Directory>
			   </IfModule>
		EOF
		htpasswd -b -c /etc/httpd/$_slug.users.pwd $_user $_pass 2>/dev/null
		cvw_url -a "$_name" $_uri
	fi

	cvw_say -o "$_slug"
}


function webdav_remove
{
	local _root=$(cvw_xml -r system/app_root)/$_slug
	local _uri=$(cvw_xml -r software/$_slug/uri)
	local _html
	[[ $_uri == "/" ]] && _html="/var/www/html" || _html="$_root$_uri"

	if [[ -d $_root ]] ; then
		cvw_say -h "Removing $_name"
		cvw_backup -z $_slug
		cvw_mysql -z $_slug $_slug
		if [[ $_uri == "/" ]] ; then
			rm -rf /var/www/html
			mkdir -p /var/www/html
		fi
		rm -rf $_root
		cvw_say -o "$_slug:remove"
	fi

	rm -f /tmp/cvw/error
}


while getopts ":i" opt ; do
	case $opt in
		i)
			if cvw_xml -a software/$_slug ; then
				webdav_install
			else
				webdav_remove
			fi
			exit 0
			;;

		\?)	usage
			;;
	esac
done
shift $(($OPTIND-1))

usage

