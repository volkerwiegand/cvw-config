#!/bin/bash
# vim: set ts=8 tw=0 noet :

#################################################################################
######
###### cvw_wordpress - Install or remove WordPress
######                 https://wordpress.org/
######                 https://codex.wordpress.org/Installing_WordPress
######                 https://de.wordpress.org/
######
###### (c) 2016-2018 Volker Wiegand <volker.wiegand@cvw.de>
######               This file is part of "CVW Config"
######               See LICENSE for copyright information
######
#################################################################################

# Exit on error
set -e -o pipefail

# Remember the args
_prog=${0##*/}
_args="$*"
_name="WordPress"
_slug="wordpress"


function usage
{
	rm -rf /tmp/cvw_error
	cat >/tmp/cvw_error <<-EOF
		Syntax: $_prog -i   Install or remove $_name
		    or: $_prog -g   Generate config template
		Called with: '$_prog $_args'
	EOF

	if [[ -d /tmp/cvw ]] ; then
		cat /tmp/cvw_error >>/tmp/cvw/error
	else
		cat /tmp/cvw_error >&2
	fi
	rm -f /tmp/cvw_error

	exit 1
}


function wordpress_generate
{
	local _fqdn=$(cvw_xml -r host/fqdn)
	[[ -s /tmp/cvw/error ]] && exit 1
	local _domain=${_fqdn#*.}

	cat <<-EOF
	    <wordpress active="true" multisite="false">
	      <uri>/</uri>
	      <password>$(cvw -p 20)</password>
	      <title>WordPress Blog</title>
	      <admin>
	        <name>Blog Admin</name>
	        <password>$(cvw -p 20)</password>
	        <email>admin@$_domain</email>
	      </admin>
	      <key_1>$(cvw -p 40)</key_1>
	      <key_2>$(cvw -p 40)</key_2>
	      <key_3>$(cvw -p 40)</key_3>
	      <key_4>$(cvw -p 40)</key_4>
	      <key_5>$(cvw -p 40)</key_5>
	      <key_6>$(cvw -p 40)</key_6>
	      <key_7>$(cvw -p 40)</key_7>
	      <key_8>$(cvw -p 40)</key_8>
	    </wordpress>

	EOF
	exit 0
}


function wordpress_pristine
{
	cvw_say -s "creating pristine install"
	local _root=$(cvw_xml -r system/app_root)/$_slug
	[[ -s /tmp/cvw/error ]] && exit 1
	local _app=$_root/app

	rm -rf $_root

	cvw_unpack -u apache -i $_slug $_app index.php
	_file=$_app/wp-config-sample.php
	[[ -f $_file ]] && mv -f $_file $_file.bak_VW
	install -o apache -g apache -d $_app/wp-content/uploads

	date >$_root/installed.date_VW
}


function wordpress_synchronize
{
	if [[ -s /var/local/backup/$_slug/last/mysql && \
	      -d /var/local/backup/$_slug/last/dirs  && \
	      -x /usr/local/bin/bkup.$_slug          && \
	      -x /usr/local/bin/rstr.$_slug ]] ; then
		cvw_say -s "updating / syncing backup"
		/usr/local/bin/bkup.$_slug
	fi
}


function wordpress_configure
{
	cvw_say -s "running configure script"
	local _fqdn=$(cvw_xml -r host/fqdn)
	local _root=$(cvw_xml -r system/app_root)/$_slug
	local _uri=$(cvw_xml -r software/$_slug/uri)
	[[ -s /tmp/cvw/error ]] && exit 1
	local _app=$_root/app
	local _file _multisite

	if cvw_xml -t software/$_slug/multisite ; then
		cat >/tmp/cvw/multisite.wp <<-EOF
			define('WP_ALLOW_MULTISITE',   true);
			define('MULTISITE',            true);
			define('SUBDOMAIN_INSTALL',    false);
			define('DOMAIN_CURRENT_SITE',  '$_fqdn');
			define('PATH_CURRENT_SITE',    '/');
			define('SITE_ID_CURRENT_SITE', 1);
			define('BLOG_ID_CURRENT_SITE', 1);
			# define('COOKIE_DOMAIN',        \$_SERVER['HTTP_HOST']);
		EOF
	else
		cat >/tmp/cvw/multisite.wp <<-EOF
			define('WP_ALLOW_MULTISITE',   false);
		EOF
	fi

	_file="$_app/wp-config.php"
	cat >$_file.tmp_VW <<-EOF
		<?php
		define('DB_NAME',     '$_slug');
		define('DB_USER',     '$_slug');
		define('DB_PASSWORD', '$(cvw_xml -r software/$_slug/password)');
		define('DB_HOST',     'localhost');
		define('DB_CHARSET',  'utf8');
		define('DB_COLLATE',  'utf8_general_ci');
		\$table_prefix = 'wp_';

		define('AUTH_KEY',         '$(cvw_xml -r software/$_slug/key_1)');
		define('SECURE_AUTH_KEY',  '$(cvw_xml -r software/$_slug/key_2)');
		define('LOGGED_IN_KEY',    '$(cvw_xml -r software/$_slug/key_3)');
		define('NONCE_KEY',        '$(cvw_xml -r software/$_slug/key_4)');
		define('AUTH_SALT',        '$(cvw_xml -r software/$_slug/key_5)');
		define('SECURE_AUTH_SALT', '$(cvw_xml -r software/$_slug/key_6)');
		define('LOGGED_IN_SALT',   '$(cvw_xml -r software/$_slug/key_7)');
		define('NONCE_SALT',       '$(cvw_xml -r software/$_slug/key_8)');

		define('WPLANG',               '$(cvw_xml -r system/language)');
		$(cat /tmp/cvw/multisite.wp)
		define('FORCE_SSL_ADMIN',      true);
		define('WP_DEBUG',             false);
		define('FS_METHOD',            'direct');
		# define('WP_ALLOW_REPAIR',    true);

		if ( !defined('ABSPATH') )
		    define('ABSPATH', dirname(__FILE__) . '/');
		require_once(ABSPATH . 'wp-settings.php');
	EOF
	[[ -s /tmp/cvw/error ]] && exit 1
	cvw_file -u apache -v $_file $(cvw_php -s)

	_file="$_app/.htaccess"
	if cvw_xml -t software/$_slug/multisite ; then
		cat >$_file.tmp_VW <<-EOF
			# BEGIN WordPress
			<IfModule mod_rewrite.c>
			   RewriteEngine On
			   RewriteBase ${_uri%/}/
			   RewriteRule ^index\\.php\$ - [L]

			   # add a trailing slash to /wp-admin
			   RewriteRule ^([_0-9a-zA-Z-]+/)?wp-admin\$ \$1wp-admin/ [R=301,L]

			   RewriteCond %{REQUEST_FILENAME} -f [OR]
			   RewriteCond %{REQUEST_FILENAME} -d
			   RewriteRule ^ - [L]
			   RewriteRule ^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*) \$2 [L]
			   RewriteRule ^([_0-9a-zA-Z-]+/)?(.*\.php)\$ \$2 [L]
			   RewriteRule . index.php [L]
			</IfModule>
			# END WordPress
		EOF
	else
		cat >$_file.tmp_VW <<-EOF
			# BEGIN WordPress
			<IfModule mod_rewrite.c>
			   RewriteEngine On
			   RewriteBase ${_uri%/}/
			   RewriteRule ^index\\.php\$ - [L]

			   RewriteCond %{REQUEST_FILENAME} !-f
			   RewriteCond %{REQUEST_FILENAME} !-d
			   RewriteRule . /index.php [L]
			</IfModule>
			# END WordPress
		EOF
	fi
	[[ -s /tmp/cvw/error ]] && exit 1
	cvw_file -u apache -v $_file $(cvw_php -s)
}


function wordpress_install
{
	cvw_say -h "Installing $_name"
	cvw_xml -a software/mysql || cvw_say -f "$_prog: requires mysql"
	cvw_xml -a software/php   || cvw_say -f "$_prog: requires php"
	local _root=$(cvw_xml -r system/app_root)/$_slug
	local _uri=$(cvw_xml -r software/$_slug/uri)
	local _pass=$(cvw_xml -r software/$_slug/password)
	[[ -s /tmp/cvw/error ]] && exit 1
	local _app=$_root/app
	local _conf _file _subdir

	if [[ -s /tmp/cvw/info ]] ; then
		cat >>/tmp/cvw/info <<-EOF
			    ====== $_name ======
			      Title ...................: $(cvw_xml -r software/$_slug/title)
			      Admin User ..............: $(cvw_xml -r software/$_slug/admin/name)
			      Admin Password ..........: $(cvw_xml -r software/$_slug/admin/password)
			      Admin Email .............: $(cvw_xml -r software/$_slug/admin/email)
		EOF
	fi
	[[ -s /tmp/cvw/error ]] && exit 1

	cvw_mysql -c $_slug $_slug $_pass utf8_general_ci
	cvw_backup -m $_slug -u $_slug -p $_pass $_slug \
			$_app/wp-content/plugins \
			$_app/wp-content/themes \
                        $_app/wp-content/uploads

	if [[ -s $_root/installed.date_VW ]] ; then
		wordpress_synchronize
	else
		wordpress_pristine
	fi
	wordpress_configure

	if cvw_xml -a software/nginx ; then
		cvw_nginx -p $_slug
	fi

	if cvw_xml -a software/apache ; then
		cvw_apache -p $_slug
	fi

	cvw_url -a "$_name" $_uri

	cvw_say -o "$_slug"
}


while getopts ":ig" opt ; do
	case $opt in
		i)
			if cvw_xml -a software/$_slug ; then
				wordpress_install
			else
				cvw_php -z $_slug
			fi
			exit 0
		;;

		g)
			wordpress_generate
			exit 0
		;;

		\?)
			usage
		;;
	esac
done
shift $(($OPTIND-1))

usage

