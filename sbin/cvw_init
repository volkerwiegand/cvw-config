#!/bin/bash
# vim: set ts=8 tw=0 noet :

#################################################################################
######
###### cvw_init - Config initialisation
######
###### (c) 2016-2019 Volker Wiegand <volker.wiegand@cvw.de>
######               This file is part of "CVW Config"
######               See LICENSE for copyright information
######
#################################################################################

# Exit on error
set -e -o pipefail

# Remember the args
_prog=${0##*/}
_args="$*"


function usage
{
	cat >&2 <<-EOF
		Syntax: $_prog [-u] [-d] [-i]  Prepare [upgrade] run [debug] [info]
		Called with: '$_prog $_args'
	EOF
	exit 1
}

function failure
{
	echo "$_prog: $*" >&2
	exit 1
}


function init_init
{
	local _fqdn _addr _lang _curr _want _file _name
	local _id _static _host _cert _src _dst _swap

	rm -rf /tmp/cvw
	test -e /tmp/cvw && failure "pre-existing /tmp/cvw"
	test -d /var/local/cfg || failure "non-existing /var/local/cfg"
	mkdir -p -m 0700 /tmp/cvw /var/local/backup

	cvw_say
	cvw_say -a "$(date)"

	cat >/tmp/cvw/tripwire.dirs <<-EOF
		/usr/bin
		/usr/sbin
		# /usr/lib
		# /usr/lib64
		# /usr/libexec
		# /usr/share
		/usr/local/bin
		/usr/local/sbin
		# /usr/local/lib
		# /usr/local/lib64
		# /usr/local/libexec
		# /usr/local/share
		/etc/sysconfig/network-scripts
	EOF

	[[ $_debug ]] && echo "debug" >/tmp/cvw/debug

	cvw_say -h "Checking coldstart"

	_curr=$(sysctl -n net.ipv6.conf.all.disable_ipv6)
	if cvw_xml -t host/ipv6 ; then
		_want=0
	else
		_want=1
	fi
	if [[ $_want -ne $_curr ]] ; then
		cvw_say -s "setting ipv6 disable to $_want"
		sysctl -w net.ipv6.conf.all.disable_ipv6=$_want
		sysctl -w net.ipv6.conf.default.disable_ipv6=$_want
	fi
	_file="/etc/sysctl.d/50-disable_ipv6.conf"
	cat >$_file.tmp_VW <<-EOF
		net.ipv6.conf.all.disable_ipv6 = $_want
		net.ipv6.conf.default.disable_ipv6 = $_want
	EOF
	cvw_file -v $_file

	if [[ ! -s /root/initial_rpm_list ]] ; then
		cvw_rpm -L
		echo "initial" >>/tmp/cvw/updating
	fi

	cvw_say -o "coldstart"

	cvw_say -h "Configuring / verifying basics"
	_fqdn=$(cvw_xml -r host/fqdn)
	_addr=$(cvw_xml -r host/addr)
	# _addr6=$(cvw_xml -r host/addr6)
	_lang=$(cvw_xml -r system/language)
	_zone=$(cvw_xml -r system/timezone)
	_root=$(cvw_xml -r system/app_root)
	[[ -s /tmp/cvw/error ]] && exit 1
	rm -rf $HOME/.cpanm

	if [[ $_info ]] ; then
		cat >/tmp/cvw/info <<-EOF
			==> Info summary
			    ====== Init ======
			      Language ................: $_lang
			      Time Zone ...............: $_zone
			      App root ................: $_root
			      FQDN ....................: $_fqdn
			      IPv4 Addr ...............: $_addr
			      # IPv6 Addr ...............: $_addr6
		EOF
	fi

	cvw_xml -u host/static | sort | while read _id ; do
		_src=$(cvw_xml -r host/static:$_id/device)
		_dst=$(cvw_xml -r host/static:$_id/index)
		[[ -s /tmp/cvw/error ]] && exit 1
		_name="$_src:$_dst"
		_file="/etc/sysconfig/network-scripts/ifcfg-$_name"
		if [[ -s $_file ]] ; then
			cvw_say -s "deleting static IP $_name"
			ifdown $_name
			rm -f $_file
		fi
	done
	cvw_xml -i host/static | sort | while read _id ; do
		_src=$(cvw_xml -r host/static:$_id/device)
		_dst=$(cvw_xml -r host/static:$_id/index)
		_static=$(cvw_xml -r host/static:$_id/addr)
		[[ -s /tmp/cvw/error ]] && exit 1
		_name="$_src:$_dst"
		cvw_say -s "IP ($_name) $_static"
		_file="/etc/sysconfig/network-scripts/ifcfg-$_name"
		cat >$_file.tmp_VW <<-EOF
			BOOTPROTO=static
			DEVICE=$_name
			IPADDR=$_static
			PREFIX=32
			TYPE=Ethernet
			USERCTL=no
			ONBOOT=yes
		EOF
		ifup $_name
		cvw_file -v $_file network
		if [[ $_info ]] ; then
			echo "      IPv4 static Addr ........: $_static ($_name)" >>/tmp/cvw/info
		fi
	done

	_src="/var/local/cfg/files/keys"
	_dst="/etc/pki/tls/dhparam.pem"
	if [[ -s $_src/dh4096_param.pem ]] ; then
		cvw_say -s "copying 4096 bit DH group"
		cp $_src/dh4096_param.pem $_dst
	elif [[ -s $_src/dh2048_param.pem ]] ; then
		cvw_say -s "copying 2048 bit DH group"
		cp $_src/dh2048_param.pem $_dst
	elif [[ -s $_src/dh1024_param.pem ]] ; then
		cvw_say -s "copying 1024 bit DH group"
		cp $_src/dh1024_param.pem $_dst
	elif [[ -x /usr/bin/openssl ]] ; then
		cvw_say -s "generating 1024 bit DH group"
		openssl dhparam -out $_dst 1024
	else
		cvw_say -s "no DH group file yet"
	fi
	if [[ -s $_src/id_rsa && -s $_src/id_rsa.pub ]] ; then
		install -m 0700 -d /root/.ssh
		install -m 0600 $_src/id_rsa     /root/.ssh/
		install -m 0644 $_src/id_rsa.pub /root/.ssh/
	fi

	if cvw_xml -t host/hostname ; then
		cvw_say -s "setting hostname"
		hostnamectl set-hostname $_fqdn
		cvw_file -e /etc/hosts "s/^$_addr.*/$_addr $_fqdn ${_fqdn%%.*}/"
	fi

	if cvw_xml -t host/firewall ; then
		cvw_say -s "enabling firewall"
		cvw_rpm -i firewalld
		cvw_service -S firewalld
		cvw_firewall -s dhcpv6-client
	else
		cvw_say -s "disabling firewall"
		cvw_service -d firewalld
		cvw_rpm -e firewalld
	fi

	if cvw_xml -c host/ssh_port ; then
		_ssh_port=$(cvw_xml -r host/ssh_port)
		cvw_say -s "SSH port is $_ssh_port"
		cvw_firewall -t $_ssh_port
		cvw_file -e /etc/ssh/sshd_config "s/^[# ]*Port.*/Port $_ssh_port/" sshd
	else
		cvw_firewall -s ssh
	fi
	cvw_rpm -i xorg-x11-xauth
	cvw_file -e /etc/ssh/sshd_config "s/^[# ]*X11DisplayOffset.*/X11DisplayOffset 10/" sshd
	cvw_file -e /etc/ssh/sshd_config "s/^[# ]*X11UseLocalhost.*/X11UseLocalhost no/" sshd

	if cvw_xml -c system/swap ; then
		_swap=$(cvw_xml -r system/swap)
		if [[ ! -e /mnt/swap.0 ]] ; then
			cvw_say -s "creating $_swap of swap"
			fallocate --length $_swap /mnt/swap.0
			chmod 0600 /mnt/swap.0
			mkswap /mnt/swap.0
		fi
		if ! grep -q mnt.swap.0 /etc/fstab ; then
			cat >/etc/fstab.tmp_VW <<-EOF
				$(grep -v mnt.swap.0 /etc/fstab)
				/mnt/swap.0 swap swap defaults 0 0
			EOF
			cvw_file -v /etc/fstab
		fi
		swapon -a
	fi

	cvw_say -s "language is $_lang"
	cvw_say -s "timezone is $_zone"

	cvw_say -o "basics"

	if [[ $_upgrade ]] ; then
		echo "upgrade" >>/tmp/cvw/updating
		cvw_say -h "Starting the upgrade"
	else
		cvw_say -h "Starting the update"
	fi

	cvw_rpm -l general

	# cvw_say -s "sleep for 5 seconds"
	# sleep 5

	if cvw_xml -t software/development ; then
		cvw_rpm -g "libtool:Development Tools"
		cvw_rpm -l development
	fi

	if cvw_xml -t software/go ; then
		cvw_download -i golang $HOME/src/files
		_file=$HOME/src/files/go$(cvw_download -v golang).linux-amd64.tar.gz
		tar -C /usr/local -xzf $_file
		_file=/etc/profile.d/go.sh
		cat >$_file.tmp_VW <<-EOF
			#
			# Set path for go language
			#
			export GOPATH=/usr/local/gocode
			mkdir -p \$GOPATH

			#
			# Add go binaries to search path
			#
			if ! echo \$PATH | grep -q go.bin ; then
			    export PATH=\$PATH:/usr/local/go/bin:/usr/local/gocode/bin
			fi
		EOF
		cvw_file -v $_file
		source $_file
		if [[ ! -x /usr/local/gocode/bin/gb ]] ; then
			go get -u -v github.com/constabulary/gb/...
		fi
	fi

	grep -q -s upgrade /tmp/cvw/updating && cvw_rpm -u
	grep -q -s initial /tmp/cvw/updating && cvw_say -f "initial: cvw -l shutdown -r now"

	cvw_say -o "startup"
}


while getopts ":diu" opt ; do
	case $opt in
		d)
			_debug=1
		;;

		i)
			_info=1
		;;

		u)
			_upgrade=1
		;;

		\?)
			usage
		;;
	esac
done
shift $(($OPTIND-1))

init_init

