#!/bin/bash
# vim: set ts=8 tw=0 noet :

#################################################################################
######
###### cvw_postgresql - Install or remove PostgreSQL 10
######                  https://postgresql.org/
######
###### (c) 2016-2019 Volker Wiegand <volker.wiegand@cvw.de>
######               This file is part of "CVW Config"
######               See LICENSE for copyright information
######
#################################################################################

# Exit on error
set -e -o pipefail

# Remember the args
_prog=${0##*/}
_args="$*"
_name="PostgreSQL 10"
_slug="postgresql"

_DATADIR="/var/lib/pgsql/10/data"


function usage
{
	rm -rf /tmp/cvw_error
	cat >/tmp/cvw_error <<-EOF
		Syntax: $_prog -i             Install or $_name
		    or: $_prog -c name user   Create database with owner
		    or: $_prog -d             Get PostgreSQL data directory
		    or: $_prog -p user pass   Update password in .pgpass
		    or: $_prog -P user        Remove password for user
		    or: $_prog -s             Get PostgreSQL service name
		    or: $_prog -u user pass   Create user with password
		    or: $_prog -U user        Remove user
		Called with: '$_prog $_args'
	EOF

	if [[ -d /tmp/cvw ]] ; then
		cat /tmp/cvw_error >>/tmp/cvw/error
	else
		cat /tmp/cvw_error >&2
	fi
	rm -f /tmp/cvw_error

	exit 1
}


function postgresql_check_user
{
	local _user=$1

	psql -U postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='$_user';" | grep -q 1
}


function postgresql_check_db
{
	local _db=$1

	psql -U postgres -tAc "SELECT 1 FROM pg_catalog.pg_database WHERE datname='$_db';" | grep -q 1
}


function postgresql_add_pass
{
	local _user=$1
	local _pass=$2
	local _file="/root/.pgpass"

	if [[ -z $_pass ]] ; then
		cvw_file -e "/:$_user:/d" -m 0600 $_file
	elif grep -q -s ":$_user:" $_file ; then
		cvw_file -e "s/:$_user:.*/:$_user:$_pass/" -m 0600 $_file
	else
		echo "*:*:*:$_user:$_pass" >>$_file
		cvw_say -s "adding $_user to $_file"
	fi

	return 0
}


function postgresql_add_user
{
	local _user=$1
	local _pass=$2

	if ! postgresql_check_user $_user ; then
		psql -U postgres -c "CREATE USER $_user WITH LOGIN CREATEDB;"
	fi

	psql -U postgres -c "ALTER USER $_user PASSWORD '$_pass';"
}


function postgresql_add_db
{
	local _db=$1
	local _user=$2

	if ! postgresql_check_user $_user ; then
		cvw_say -f "$_prog: missing owner for $_db"
	fi

	if ! postgresql_check_db $_db ; then
		psql -U postgres -c "CREATE DATABASE $_db WITH OWNER = $_user;"
	fi
}


function postgresql_install
{
	cvw_say -h "Installing $_name"
	local _lang=$(cvw_xml -r system/language)
	local _pass=$(cvw_xml -r software/$_slug/password)
	[[ -s /tmp/cvw/error ]] && exit 1

	if [[ -s /tmp/cvw/info ]] ; then
		cat >>/tmp/cvw/info <<-EOF
			    ====== $_name ======
			      Password ................: $_pass
		EOF
	fi

	cvw_yum -a postgresql
	cvw_rpm -i postgresql10
	cvw_rpm -i postgresql10-server
	cvw_rpm -i postgresql10-contrib
	cvw_rpm -i postgresql10-devel

	if [[ ! -s $_DATADIR/PG_VERSION ]] ; then
		export PGSETUP_INITDB_OPTIONS="--locale=$_lang.UTF-8 --encoding=UTF-8"
		/usr/pgsql-10/bin/postgresql-10-setup initdb
		cvw_service -S postgresql-10
		cvw_user -r postgres "psql -c \"ALTER USER postgres PASSWORD '$_pass';\""
	else
		cvw_service -s postgresql-10
	fi

	_file="$_DATADIR/pg_hba.conf"
	cvw_file -e $_file "/^host/s/ident/md5/" postgresql-10
	[[ -s /tmp/cvw/changed ]] && _restart=1
	cvw_file -e $_file "/^local/s/peer/md5/" postgresql-10
	[[ -s /tmp/cvw/changed ]] && _restart=1

	_file="/root/.pgpass"
	cat >$_file.tmp_VW <<-EOF
		# hostname:port:database:username:password
		*:*:*:postgres:$_pass
	EOF
	cvw_file -v $_file -m 0600 postgresql-10
	[[ -s /tmp/cvw/changed ]] && _restart=1

	# Restart service
	[[ $_restart ]] && cvw_service -R postgresql-10

	cvw_say -o "$_slug"
}


function postgresql_remove
{
	if cvw_service -c postgresql-10 ; then
		cvw_say -h "Removing $_name"
		cvw_rpm -e postgresql10-devel
		cvw_rpm -e postgresql10-contrib
		cvw_rpm -e postgresql10-server
		cvw_rpm -e postgresql10
		rm -rf /var/lib/pgsql
		cvw_say -o "$_slug:remove"
	fi

	rm -f /tmp/cvw/error
}


while getopts ":c:dip:P:su:U:" opt ; do
	case $opt in
		c)
			_new_db=$OPTARG
		;;

		d)
			echo -n $_DATADIR
			exit 0
		;;

		i)
			if cvw_xml -a software/$_slug ; then
				postgresql_install
			else
				postgresql_remove
			fi
			exit 0
		;;

		p)
			_pw_user=$OPTARG
		;;

		P)
			if postgresql_check_user $OPTARG ; then
				postgresql_add_pass $OPTARG
				exit
			fi
			exit 0
		;;

		s)
			echo -n "postgresql-10"
			exit 0
		;;

		u)
			_new_user=$OPTARG
		;;

		U)
			if postgresql_check_user $OPTARG ; then
				psql -U postgres -c "DROP ROLE $OPTARG;"
				exit
			fi
			exit 0
		;;

		\?)
			usage
		;;
	esac
done
shift $(($OPTIND-1))

if [[ $_new_user ]] ; then
	postgresql_add_user $_new_user $1
	exit
fi

if [[ $_pw_user ]] ; then
	postgresql_add_pass $_pw_user $1
	exit
fi

if [[ $_new_db ]] ; then
	postgresql_add_db $_new_db $1
	exit
fi

usage

