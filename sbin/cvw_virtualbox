#!/bin/bash
# vim: set ts=8 tw=0 noet :

#################################################################################
######
###### cvw_virtualbox - Install or remove Oracle VirtualBox
######                  https://www.virtualbox.org/
######
###### (c) 2018-2019 Volker Wiegand <volker.wiegand@cvw.de>
######               This file is part of "CVW Config"
######               See LICENSE for copyright information
######
#################################################################################

# Exit on error
set -e -o pipefail

# Remember the args
_prog=${0##*/}
_args="$*"
_name="Oracle VirtualBox"
_slug="virtualbox"


function usage
{
	rm -rf /tmp/cvw_error
	cat >/tmp/cvw_error <<-EOF
		Syntax: $_prog -i   Install or remove $_name
		    or: $_prog -g   Generate config template
		Called with: '$_prog $_args'
	EOF

	if [[ -d /tmp/cvw ]] ; then
		cat /tmp/cvw_error >>/tmp/cvw/error
	else
		cat /tmp/cvw_error >&2
	fi
	rm -f /tmp/cvw_error

	exit 1
}


function virtualbox_generate
{
	cat <<-EOF
	    <virtualbox active="true">
	    </virtualbox>

	EOF
	exit 0
}


function virtualbox_install
{
	cvw_say -h "Installing $_name"
	local _root=$(cvw_xml -r system/app_root)/$_slug
	local _serv="vboxautostart-service"
	local _rpm _pack _done _file _id

	for _rpm in binutils \
			qt \
			gcc \
			make \
			patch \
			libgomp \
			glibc-headers \
			glibc-devel \
			kernel-headers \
			kernel-devel \
			dkms ; do
		cvw_rpm -i $_rpm
	done

	cvw_yum -a virtualbox
	cvw_rpm -i VirtualBox-6.0
	cvw_service -s $_serv

	_done="$_root/setup.done"
	if [[ ! -s $_done ]] ; then
		/usr/lib/virtualbox/vboxdrv.sh setup
		date >$_done
	fi

	cvw_download -i virtualbox_extpack $_root/Download
	_pack="Oracle VM VirtualBox Extension Pack"
	if ! VBoxManage list extpacks | grep -q "$_pack" ; then
		_file="$_root/Download/$(cvw_download -f virtualbox_extpack)"
		echo "y" | VBoxManage extpack install --replace $_file
	fi

	mkdir -p /etc/vbox -m 1775
	VBoxManage setproperty autostartdbpath /etc/vbox

	_file="/etc/vbox/autostart.cfg"
	cat >$_file.tmp_VW <<-EOF
		default_policy = deny
		root = {
		   allow = true
		}
	EOF
	cvw_file -v $_file $_serv

	_file="/etc/default/virtualbox"
	cat >$_file.tmp_VW <<-EOF
		VBOXAUTOSTART_DB=/etc/vbox
		VBOXAUTOSTART_CONFIG=/etc/vbox/autostart.cfg
	EOF
	cvw_file -v $_file $_serv

	chgrp -R vboxusers /etc/vbox

	cvw_xml -u software/$_slug/guest | sort -u | while read _id ; do
		if VBoxManage list vms | grep -q "$_id" ; then
			cvw_say -s "Deleting VM $_id"
			VBoxManage unregistervm "$_id" --delete
		fi
	done

	cvw_xml -i software/$_slug/guest | sort -u | while read _id ; do
		cvw_say -s "Guest VM: $_id"
		local _base="software/$_slug/guest:$_id"
		local _vmdir="$_root/VMs/$_id"
		local _ostype="$(cvw_xml -r $_base/ostype)"
		local _cpus="$(cvw_xml -r $_base/cpus)"
		local _memory="$(cvw_xml -r $_base/memory)"
		local _hdd="$_vmdir/$_id.vdi"
		local _disk="$(cvw_xml -r $_base/disk)"
		local _port="$(cvw_xml -r $_base/port)"
		local _image _medium

		if ! VBoxManage list hdds | grep -qi "$_hdd" ; then
			cvw_say -s "Creating HDD $_hdd"
			VBoxManage createhd --filename "$_hdd" \
				--format VDI \
				--size $_disk
		fi

		if ! VBoxManage list vms | grep -qi "$_id" ; then
			cvw_say -s "Creating VM $_id"
			VBoxManage createvm --name "$_id" \
				--ostype "$_ostype" \
				--register \
				--basefolder "$_root/VMs"
		fi

		if ! VBoxManage showvminfo "$_id" | grep -qi "Memory size.*$_memory" ; then
			cvw_say -s "... setting memory to $_memory"
			VBoxManage modifyvm "$_id" --memory $_memory --vram 256
		fi

		if ! VBoxManage showvminfo "$_id" | grep -qi "Number of CPUs.*$_cpus" ; then
			cvw_say -s "... setting CPUs to $_cpus"
			VBoxManage modifyvm "$_id" --cpus $_cpus
		fi

		if ! VBoxManage showvminfo "$_id" | grep -qi "Storage Controller.*SATA Controller" ; then
			cvw_say -s "... adding SATA Controller (IntelAHCI)"
			VBoxManage storagectl "$_id" \
				--name "SATA Controller" \
				--add sata \
				--controller IntelAHCI
		fi

		if ! VBoxManage showvminfo "$_id" | grep -qi "^SATA Controller.*$_hdd" ; then
			cvw_say -s "... attaching $_hdd to SATA 0:0"
			VBoxManage storageattach "$_id" \
				--storagectl "SATA Controller" \
				--port 0 \
				--device 0 \
				--type hdd \
				--medium "$_hdd"
		fi

		if ! VBoxManage showvminfo "$_id" | grep -qi "Storage Controller.*IDE Controller" ; then
			cvw_say -s "... adding IDE Controller (PIIX4)"
			VBoxManage storagectl "$_id" \
				--name "IDE Controller" \
				--add ide \
				--controller PIIX4
		fi

		if cvw_xml -a $_base/image ; then
			_medium="$_root/Download/$(cvw_xml -r $_base/image)"
			if ! VBoxManage showvminfo "$_id" | grep -qi "IDE Controller.*$_medium" ; then
				cvw_say -s "... attaching $_medium to IDE 0:0"
				VBoxManage storageattach "$_id" \
					--storagectl "IDE Controller" \
					--port 0 \
					--device 0 \
					--type dvddrive \
					--medium "$_medium"
			fi
		else
			if VBoxManage showvminfo "$_id" | grep -qi "^IDE Controller" ; then
				cvw_say -s "... detaching from IDE 0:0"
				VBoxManage storageattach "$_id" \
					--storagectl "IDE Controller" \
					--port 0 \
					--device 0 \
					--medium none
			fi
		fi

		VBoxManage modifyvm "$_id" --boot1 dvd --boot2 disk --boot3 none --boot4 none
		VBoxManage modifyvm "$_id" --vrde on
		VBoxManage modifyvm "$_id" --vrdemulticon on --vrdeport $_port
		VBoxManage modifyvm "$_id" --ioapic on
		VBoxManage modifyvm "$_id" --autostart-enabled on

		cvw_firewall -t $_port
	done

	cvw_say -o "$_slug"
}


function virtualbox_remove
{
	if cvw_rpm -c VirtualBox-6.0 ; then
		cvw_say -h "Removing $_name"

		cvw_rpm -e VirtualBox-6.0

		cvw_say -o "$_slug:remove"
	fi
}


while getopts ":ig" opt ; do
	case $opt in
		i)
			if cvw_xml -a software/$_slug ; then
				virtualbox_install
			else
				virtualbox_remove
			fi
			exit 0
		;;

		g)
			virtualbox_generate
			exit 0
		;;

		\?)
			usage
		;;
	esac
done
shift $(($OPTIND-1))

usage

