#!/bin/bash
# vim: set ts=8 tw=0 noet :

#################################################################################
######
###### cvw_postfix - Install or remove Postfix and Dovecot
######               http://www.postfix.org/
######               http://www.dovecot.org/
######               https://www.tecmint.com/setup-postfix-mail-server-and-dovecot-with-mariadb-in-centos/
######               https://github.com/volkerwiegand/postfix-go
######               https://devops.profitbricks.com/tutorials/configure-a-postfix-relay-through-gmail-on-centos-7/
######
###### (c) 2016-2019 Volker Wiegand <volker.wiegand@cvw.de>
######               This file is part of "CVW Config"
######               See LICENSE for copyright information
######
#################################################################################

# Exit on error
set -e -o pipefail

# Remember the args
_prog=${0##*/}
_args="$*"
_name="Postfix and Dovecot"
_slug="postfix"


function usage
{
	rm -rf /tmp/cvw_error
	cat >/tmp/cvw_error <<-EOF
		Syntax: $_prog -i          Install or remove $_name
		    or: $_prog -m milter   Add Mail filter
		    or: $_prog -x          Execute and cleanup
		Called with: '$_prog $_args'
	EOF

	if [[ -d /tmp/cvw ]] ; then
		cat /tmp/cvw_error >>/tmp/cvw/error
	else
		cat /tmp/cvw_error >&2
	fi
	rm -f /tmp/cvw_error

	exit 1
}


function postfix_install_standalone
{
	cvw_say -h "Installing $_name (standalone)"
	cvw_xml -a software/certbot || cvw_say -f "$_prog: requires certbot"
	cvw_xml -a software/mysql   || cvw_say -f "$_prog: virtual requires mysql"
	cvw_user -s vmail
	local _fqdn=$(cvw_xml -r host/fqdn)
	local _root=$(cvw_xml -r system/app_root)/$_slug
	local _uri=$(cvw_xml -r software/$_slug/uri)
	local _port=$(cvw_xml -R software/$_slug/port 8100)
	local _admin=$(cvw_xml -r host/admin)
	local _vmail_uid=$(id -u vmail)
	local _vmail_gid=$(id -g vmail)
	local _vmail_dir=$(cvw_user -h vmail)
	local _pass=$(cvw_user -p vmail)
	local _mail_gid=$(id -g mail)
	[[ -s /tmp/cvw/error ]] && exit 1
	local _domain=${_fqdn#*.}
	local _cert="/etc/letsencrypt/live/$_fqdn"
	local _vdomains=/etc/postfix/sql-vdomains.cf
	local _vmailbox=/etc/postfix/sql-vmailbox.cf
	local _valias=/etc/postfix/sql-valias.cf
	local _file _master _milter _hash _addr _prod _sieve

	if [[ -s /tmp/cvw/info ]] ; then
		cat >>/tmp/cvw/info <<-EOF
			    ====== $_name ======
			      DNS record ..............: @ IN TXT "v=spf1 +a +mx ~all"
		EOF
	fi

	cvw_backup -m $_slug -u $_slug -p $_pass $_slug \
		$_vmail_dir

	cvw_mysql -c $_slug $_slug $_pass utf8_general_ci


	##########################################################
	#
	# Postfix-Go is a Web GUI for managing domains and users
	# See: https://github.com/volkerwiegand/postfix-go
	#
	# N.B.: '$_root' is set to postfix-go
	#       nothing else is under /var/local
	##########################################################

	# TODO find a better way to update to the latest version
	rm -rf $_root/app

	cvw_unpack -m -s -i postfix_go $_root/app postfix-go
	cvw_service -r postfix-go

	if cvw_xml -t software/$_slug/public ; then
		_addr="0.0.0.0:$_port"
		_prod="true"
	else
		_addr="127.0.0.1:$_port"
		_prod="false"
	fi

	mkdir -p /etc/postfix-go
	_file=/etc/postfix-go/config.yaml
	cat >$_file.tmp_VW <<-EOF
		#
		# Config file for postfix-go
		#
		Language:      "de"
		DB_Type:       "mysql"
		DB_Connect:    "$_slug:$_pass@/$_slug"
		Web_Addr:      "$_addr"
		Web_Token:     "_Postfix+Dovecot+Golang+PureCSS_"
		Base_URL:      "${_uri%/}/"
	EOF
	if cvw_xml -t software/$_slug/public ; then
		cat >>$_file.tmp_VW <<-EOF
			TLS_Cert:      "$_cert/fullchain.pem"
			TLS_Key:       "$_cert/privkey.pem"
		EOF
	fi
	cat >>$_file.tmp_VW <<-EOF
		Def_Domain:    "$_domain"
		SMTP_Host:     "$(cvw_xml -r software/$_slug/server/host)"
		SMTP_Port:     $(cvw_xml -r software/$_slug/server/port)
		SMTP_Username: "$(cvw_xml -r software/$_slug/server/username)"
		SMTP_Password: "$(cvw_xml -r software/$_slug/server/password)"
		ProdMode:      $_prod
		Verbose:       false
	EOF
	[[ -s /tmp/cvw/error ]] && exit 1
	cvw_file -v $_file postfix-go

	_file=/etc/systemd/system/postfix-go.service
	cat >$_file.tmp_VW <<-EOF
		[Unit]
		Description=Postfix and Dovecot Admin Tool
		Requires=mariadb.service
		After=mariadb.service

		[Service]
		Type=simple
		User=postfix
		WorkingDirectory=$_root/app
		ExecStart=$_root/app/postfix-go
		Restart=always

		[Install]
		WantedBy=multi-user.target
	EOF
	cvw_file -v $_file postfix-go

	if cvw_xml -t software/$_slug/public ; then
		cvw_firewall -t $_port
		cvw_url -a "$_name" ":$_port/"
	else
		if cvw_xml -a software/apache ; then
			_file=/tmp/cvw/apache.block
			cat >>$_file <<-EOF

				   <Location $_uri>
				      ProxyPass http://127.0.0.1:$_port$_uri
				   </Location>
			EOF
			cvw_apache -p $_slug
		fi
		cvw_url -a "$_name" $_uri
	fi


	##########################################################
	#
	# Here comes postfix
	#
	##########################################################

	cvw_rpm -i sendmail	# provides alternatives mta
	cvw_rpm -i postfix
	cvw_rpm -i mailx
	cvw_rpm -i cyrus-sasl-plain
	cvw_service -d sendmail
	cvw_service -s postfix
	alternatives --set mta /usr/sbin/sendmail.postfix

	cvw_file -b /etc/postfix/main.cf
	cvw_file -b /etc/postfix/master.cf

	cat >$_vdomains <<-EOF
		user = $_slug
		password = $_pass
		hosts = 127.0.0.1
		dbname = $_slug
		query = SELECT 1 FROM domains WHERE name='%s'
	EOF
	cvw_file -u root:postfix -m 0640 -v $_vdomains postfix

	cat >$_vmailbox <<-EOF
		user = $_slug
		password = $_pass
		hosts = 127.0.0.1
		dbname = $_slug
		query = SELECT 1 FROM addresses WHERE email='%s'
	EOF
	cvw_file -u root:postfix -m 0640 -v $_vmailbox postfix

	cat >$_valias <<-EOF
		user = $_slug
		password = $_pass
		hosts = 127.0.0.1
		dbname = $_slug
		query = SELECT destination FROM aliases WHERE email='%s'
	EOF
	cvw_file -u root:postfix -m 0640 -v $_valias postfix

	if grep -q "^relayhost" /etc/postfix/main.cf ; then
		for _file in main.cf master.cf ; do
			cvw_say -s "restoring /etc/postfix/$_file"
			cp /etc/postfix/$_file.bak_VW /etc/postfix/$_file
		done
	fi

	postconf -e "myhostname=$_fqdn"
	postconf -e "mydomain=$_domain"
	postconf -e "myorigin=\$mydomain"
	postconf -e "inet_interfaces=all"
	postconf -e "inet_protocols=all"
	postconf -e "mydestination=\$myhostname, localhost.\$mydomain, localhost"
	postconf -e "mynetworks_style=host"
	postconf -e "append_dot_mydomain=no"
	postconf -e "tls_random_source=dev:/dev/urandom"
	postconf -e "virtual_transport=dovecot"
	postconf -e "dovecot_destination_recipient_limit=1"
	postconf -e "virtual_mailbox_domains=mysql:$_vdomains"
	postconf -e "virtual_mailbox_maps=mysql:$_vmailbox"
	postconf -e "virtual_alias_maps=mysql:$_valias"
	postconf -e "smtp_tls_session_cache_database=btree:\$data_directory/smtp_tls_session_cache"
	postconf -e "smtp_tls_security_level=may"
	postconf -e "smtp_tls_loglevel=1"
	postconf -e "smtp_tls_CAfile=/etc/pki/tls/certs/ca-bundle.crt"
	postconf -e "smtpd_use_tls=yes"
	postconf -e "smtpd_tls_auth_only=yes"
	postconf -e "smtpd_recipient_restrictions=permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination"
	postconf -e "smtpd_tls_loglevel=1"
	postconf -e "smtpd_tls_cert_file=$_cert/fullchain.pem"
	postconf -e "smtpd_tls_key_file=$_cert/privkey.pem"
	postconf -e "smtpd_tls_session_cache_database=btree:\$data_directory/smtpd_tls_session_cache"
	postconf -e "smtpd_tls_security_level=may"
	postconf -e "smtpd_tls_received_header=yes"
	postconf -e "smtpd_sasl_type=dovecot"
	postconf -e "smtpd_sasl_path=private/auth"
	postconf -e "smtpd_sasl_auth_enable=yes"
	postconf -e "smtpd_sasl_authenticated_header=yes"
	postconf -e "smtpd_sasl_security_options=noanonymous"
	postconf -e "broken_sasl_auth_clients=yes"

	_file=/etc/postfix/master.cf
	cp /var/local/cfg/files/misc/postfix.master.cf $_file.tmp_VW
	cvw_file -v $_file postfix


	##########################################################
	#
	# Here comes dovecot
	#
	##########################################################

	cvw_yum -a ius
	cvw_rpm -i dovecot22u
	cvw_rpm -i dovecot22u-mysql
	cvw_rpm -i dovecot22u-pigeonhole
	cvw_service -s dovecot

	_file=/etc/dovecot/dovecot-sql.conf.ext
	cat >$_file.tmp_VW <<-EOF
		driver = mysql
		connect = host=127.0.0.1 dbname=$_slug user=$_slug password=$_pass
		default_pass_scheme = SHA512-CRYPT
		password_query = SELECT email AS user, sha512 AS password FROM addresses WHERE email='%u';
	EOF
	cvw_file -v $_file dovecot

	_file=/etc/dovecot/conf.d/10-auth.conf
	cvw_file -b $_file
	cat >$_file.tmp_VW <<-EOF
		##
		## Authentication processes
		##

		disable_plaintext_auth = yes
		auth_mechanisms = plain login

		passdb {
		  driver = sql
		  args = /etc/dovecot/dovecot-sql.conf.ext
		}

		userdb {
		  driver = static
		  args = uid=vmail gid=vmail home=$_vmail_dir/%u/Maildir
		}
	EOF
	cvw_file -v $_file dovecot

	_file=/etc/dovecot/conf.d/10-mail.conf
	cvw_file -b $_file
	cat >$_file.tmp_VW <<-EOF
		##
		## Mailbox locations and namespaces
		##

		mail_location = maildir:$_vmail_dir/%u/Maildir
		mail_privileged_group = mail
		mail_uid = vmail
		mail_gid = mail
		first_valid_uid = $_vmail_uid
		last_valid_uid = $_vmail_uid
		mbox_write_locks = fcntl

		namespace inbox {
		  inbox = yes
		}
	EOF
	cvw_file -v $_file dovecot

	_file=/etc/dovecot/conf.d/10-master.conf
	cvw_file -b $_file
	cat >$_file.tmp_VW <<-EOF
		##
		## Dovecot services
		##

		protocols = imap lmtp

		service imap-login {
		  inet_listener imap {
		  }
		  inet_listener imaps {
		  }
		}

		service lmtp {
		  unix_listener /var/spool/postfix/private/dovecot-lmtp {
		    mode = 0600
		    user = postfix
		    group = postfix
		  }
		}

		service auth {
		  unix_listener /var/spool/postfix/private/auth {
		    mode = 0666
		    user = postfix
		    group = postfix
		  }
		  unix_listener auth-userdb {
		    mode = 0600
		    user = vmail
		    #group = vmail
		  }
		  user = dovecot
		}

		service auth-worker {
		  user = vmail
		}

		service dict {
		  unix_listener dict {
		  }
		}
	EOF
	cvw_file -v $_file dovecot

	_file=/etc/dovecot/conf.d/10-ssl.conf
	cvw_file -b $_file
	cat >$_file.tmp_VW <<-EOF
		##
		## SSL settings
		##

		ssl = required
		ssl_cert = <$_cert/fullchain.pem
		ssl_key = <$_cert/privkey.pem
	EOF
	cvw_file -v $_file dovecot

	_file=/etc/dovecot/conf.d/15-lda.conf
	cvw_file -b $_file
	cat >$_file.tmp_VW <<-EOF
		##
		## LDA specific settings (also used by LMTP)
		##

		postmaster_address = postmaster@$_domain
		hostname = $_fqdn
		lda_mailbox_autocreate = yes
		lda_mailbox_autosubscribe = yes
		protocol lda {
		}
	EOF
	cvw_file -v $_file dovecot


	##########################################################
	#
	# Add sieve a.k.a. pigeonhole
	#
	##########################################################

	_sieve=/var/lib/dovecot/sieve
	mkdir -p $_sieve
	_file=$_sieve/default.sieve
	cat >$_file.tmp_VW <<-EOF
		require "fileinto";
		if header :contains "X-Spam" "YES" {
		  fileinto "Junk";
		}
	EOF
	cvw_file -v $_file dovecot

	_file=/etc/dovecot/conf.d/20-lmtp.conf
	cvw_file -b $_file
	cat >$_file.tmp_VW <<-EOF
		##
		## LMTP specific settings
		##

		protocol lmtp {
		  postmaster_address = postmaster@$_domain
		  mail_plugins = \$mail_plugins sieve
		}
	EOF
	cvw_file -v $_file dovecot

	_file=/etc/dovecot/conf.d/90-sieve.conf
	cvw_file -b $_file
	cat >$_file.tmp_VW <<-EOF
		##
		## Settings for the Sieve interpreter
		##

		plugin {
		  sieve = file:~/sieve;active=~/.dovecot.sieve
		  sieve_default = $_sieve/default.sieve
		}
	EOF
	cvw_file -v $_file dovecot

	# install caching nameserver (needed for Spam detection)
	cvw_rpm -i unbound
	cvw_service -s unbound

	cvw_borgclient -m $_slug
	cvw_borgclient -d $_vmail_dir

	cvw_say -o "$_slug:initial"
}


function postfix_install_smarthost
{
	cvw_say -h "Installing $_name (smarthost)"
	cvw_xml -a software/certbot || cvw_say -f "$_prog: requires certbot"
	local _fqdn=$(cvw_xml -r host/fqdn)
	local _host=$(cvw_xml -r software/$_slug/server/host)
	local _port=$(cvw_xml -r software/$_slug/server/port)
	local _user=$(cvw_xml -r software/$_slug/server/username)
	local _pass=$(cvw_xml -r software/$_slug/server/password)
	[[ -s /tmp/cvw/error ]] && exit 1
	local _domain=${_fqdn#*.}
	local _maps=/etc/postfix/sasl_passwd

	cvw_rpm -i postfix
	cvw_rpm -i mailx
	cvw_rpm -i cyrus-sasl-plain
	cvw_service -d sendmail
	cvw_service -s postfix
	alternatives --set mta /usr/sbin/sendmail.postfix

	cvw_file -b /etc/postfix/main.cf
	cvw_file -b /etc/postfix/master.cf

	echo "[$_host]:$_port $_user:$_pass" >$_maps.tmp_VW
	cvw_file -m 0640 -u root:postfix -v $_maps postfix
	postmap $_maps
	chown root:postfix $_maps.db
	chmod 0640 $_maps.db

	postconf -e "myhostname=$_fqdn"
	postconf -e "mydomain=$_domain"
	postconf -e "relayhost=[$_host]:$_port"
	postconf -e "smtp_use_tls=yes"
	postconf -e "smtp_sasl_password_maps=hash:$_maps"
	postconf -e "smtp_sasl_auth_enable=yes"
	postconf -e "smtp_tls_CAfile=/etc/ssl/certs/ca-bundle.crt"
	postconf -e "smtp_sasl_security_options=noanonymous"
	postconf -e "smtp_sasl_tls_security_options=noanonymous"

	cvw_service -r postfix

	cvw_say -o "$_slug (smarthost)"
}


function postfix_finish_standalone
{
	cvw_say -h "Finishing $_name"
	local _main=/etc/postfix/main.cf
	local _master=/etc/postfix/master.cf
	local _file _milter _milters _dest

	_file=/tmp/cvw/postfix.milters
	if [[ -s $_file ]] ; then
		_milters=""
		for _milter in $(sort $_file | awk '{print $NF}') ; do
			_milters="$_milters $_milter"
			cvw_say -s "Milter: $_milter"
		done

		postconf -e "smtpd_milters=$_milters"
		postconf -e "non_smtpd_milters=\$smtpd_milters"
		postconf -e "milter_default_action=accept"
		postconf -e "milter_protocol=6"
		postconf -e "milter_mail_macros=i {mail_addr} {client_addr} {client_name} {auth_authen} {auth_type} v _"
		postconf -e "milter_rcpt_macros=i {rcpt_addr}"
	fi

	for _dest in imap imaps smtp smtps ; do
		cvw_firewall -s $_dest
	done
	cvw_firewall -t 587	# submission not among known services??

	cvw_service -r postfix

	cvw_say -o "$_slug:finish (standalone)"
}


function postfix_remove
{
	local _root=$(cvw_xml -r system/app_root)/$_slug

	if cvw_service -c postfix ; then
		cvw_say -h "Removing $_name"

		cvw_backup -z $_slug

		cvw_service -d unbound
		cvw_rpm -e unbound

		cvw_service -d dovecot
		cvw_rpm -e dovecot22u-pigeonhole
		cvw_rpm -e dovecot22u-mysql
		cvw_rpm -e dovecot22u
		rm -rf /etc/dovecot

		cvw_rpm -i sendmail
		cvw_service -S sendmail
		alternatives --set mta /usr/sbin/sendmail.sendmail

		cvw_service -d postfix
		cvw_rpm -e postfix
		rm -rf /etc/postfix

		cvw_say -o "$_slug:remove"
	fi
}


while getopts ":ix" opt ; do
	case $opt in
		i)
			if cvw_xml -a software/$_slug ; then
				if cvw_xml -t software/$_slug/smarthost ; then
					postfix_install_smarthost
				else
					postfix_install_standalone
				fi
			else
				postfix_remove
			fi
			exit 0
		;;

		x)
			if cvw_xml -a software/$_slug ; then
				if cvw_xml -t software/$_slug/smarthost ; then
					true
				else
					postfix_finish_standalone
				fi
			fi
			exit 0
		;;

		\?)
			usage
		;;
	esac
done
shift $(($OPTIND-1))

usage

