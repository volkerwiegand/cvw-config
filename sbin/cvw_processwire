#!/bin/bash
# vim: set ts=8 tw=0 noet :

#################################################################################
######
###### cvw_processwire - Install or remove ProcessWire
######                   https://processwire.com/
######                   https://processwire.com/docs/install/new/
######
###### (c) 2016-2017 Volker Wiegand <volker.wiegand@cvw.de>
######               This file is part of "CVW Config"
######               See LICENSE for copyright information
######
#################################################################################

# Exit on error
set -e -o pipefail

# Remember the args
_prog=${0##*/}
_args="$*"
_name="ProcessWire"
_slug="processwire"


function usage
{
	rm -rf /tmp/cvw_error
	cat >/tmp/cvw_error <<-EOF
		Syntax: $_prog -i   Install or remove $_name
		    or: $_prog -g   Generate config template
		    or: $_prog -q   Query download URL
		Called with: '$_prog $_args'
	EOF

	if [[ -d /tmp/cvw ]] ; then
		cat /tmp/cvw_error >>/tmp/cvw/error
	else
		cat /tmp/cvw_error >&2
	fi
	rm -f /tmp/cvw_error

	exit 1
}


function processwire_template
{
	local _fqdn=$(cvw_xml -r host/fqdn)

	cat <<-EOF
	    <processwire active="true">
	      <uri>/</uri>
	      <password>$(cvw -p 20)</password>
	      <admin>
	        <name>pwadmin</name>
	        <password>$(cvw -p 20)</password>
	        <email>pwadmin@${_fqdn#*.}</email>
	      </admin>
	    </processwire>

	EOF
	exit 0
}


function processwire_install
{
	cvw_say -h "Installing $_name"
	cvw_xml -a software/mysql || cvw_say -f "$_prog: requires mysql"
	cvw_xml -a software/php   || cvw_say -f "$_prog: requires php"
	local _root=$(cvw_xml -r system/app_root)/$_slug
	local _uri=$(cvw_xml -r software/$_slug/uri)
	local _pass=$(cvw_xml -r software/$_slug/password)
	local _lang=$(cvw_xml -r system/language)
	[[ -s /tmp/cvw/error ]] && exit 1
	local _file _conf _site

	if [[ -s /tmp/cvw/info ]] ; then
		cat >>/tmp/cvw/info <<-EOF
			    ====== $_name ======
			      DB Name / User ..........: $_slug
			      DB Pass .................: $_pass
			      Admin Login URL .........: $(cvw_url -r $_uri)pw/
			      Admin User ..............: $(cvw_xml -r software/$_slug/admin/name)
			      Admin Password ..........: $(cvw_xml -r software/$_slug/admin/password)
			      Admin Email .............: $(cvw_xml -r software/$_slug/admin/email)
		EOF
		[[ -s /tmp/cvw/error ]] && exit 1
	fi

	cvw_mysql -c $_slug $_slug $_pass utf8_general_ci
	cvw_backup -m $_slug -u $_slug -p $_pass $_slug \
			$_root/app/site/modules \
			$_root/app/site/templates

	cvw_unpack -u apache -i $_slug $_root/app index.php

	_file=$_root/app/.htaccess
	if [[ ! -r $_file ]] ; then
		cp $_root/app/htaccess.txt $_file.tmp_VW
		cvw_file -v $_file $(cvw_php -s)
	fi
	if [[ "$_uri" == "/" ]] ; then
		cvw_file -e $_file "s|^ \( RewriteBase\).*|  #\1 /pw/|" $(cvw_php -s)
	else
		cvw_file -e $_file "s|# \(RewriteBase /pw/\)|\1|" $(cvw_php -s)
		cvw_file -e $_file "s|^\(  RewriteBase\).*|\1 $_uri/|" $(cvw_php -s)
	fi

	if [[ -d /var/local/backup/$_slug/last/mysql && \
	      -d /var/local/backup/$_slug/last/dirs  && \
	      -x /usr/local/bin/bkup.$_slug          && \
	      -x /usr/local/bin/rstr.$_slug ]] ; then
		cvw_say -s "updating / syncing backup"
		/usr/local/bin/bkup.$_slug
	fi

	_file="/etc/profile.d/alias_$_slug.sh"
	cat >$_file.tmp_VW <<-EOF
		#
		# shell aliases for processwire
		#

		alias pw-a='cd /var/local/processwire/app'
		alias pw-s='cd /var/local/processwire/app/site'
		alias pw-m='cd /var/local/processwire/app/site/modules'
		alias pw-t='cd /var/local/processwire/app/site/templates'
	EOF
	cvw_file -v $_file

	if [[ -d $_root/app/site ]] ; then
		_file=$_root/app/site/init.php
		cat >$_file.tmp_VW <<-EOF
			<?php namespace ProcessWire;
			setlocale(LC_ALL, '$_lang.utf8');
		EOF
		cvw_file -u apache -v $_file $(cvw_php -s)

		_conf=/var/local/cfg/files/processwire/config.php
		_file=$_root/app/site/config.php
		if [[ -s $_conf ]] ; then
			cp $_conf $_file.tmp_VW
			cvw_file -u apache -v $_file $(cvw_php -s)
		fi
		if grep -q -s $_pass $_file ; then
			chmod 0400 $_file
		fi
	else
		for _site in $(cvw_xml -l software/$_slug/site | sort) ; do
			cvw_say -s "adding site $_site"
			if [[ $_site =~ \.zip$ ]] ; then
				_file=/tmp/cvw/pw_site.zip
				wget -q -O - $_site >$_file
				unzip -q -o -d $_root/app $_file
				rm -f $_file
			fi
			chown -R apache:apache $_root/app
		done
		cvw_say -a "waiting for install .....: $(cvw_url -r $_uri)install.php"
	fi

	if cvw_xml -a software/nginx ; then
		cvw_nginx -p $_slug
	fi

	if cvw_xml -a software/apache ; then
		cvw_apache -p $_slug
	fi

	cvw_url -a "$_name" $_uri

	cvw_say -o "$_slug"
}


while getopts ":igq" opt ; do
	case $opt in
		i)
			if cvw_xml -a software/$_slug ; then
				processwire_install
			else
				cvw_php -z $_slug
			fi
			exit 0
		;;

		g)
			processwire_template
			exit 0
		;;

		q)
			cvw_url -q $_slug
			exit 0
		;;

		\?)
			usage
		;;
	esac
done
shift $(($OPTIND-1))

usage

