#!/bin/bash
# vim: set ts=8 tw=0 noet :

#################################################################################
######
###### cvw - CVW config system master command
######
###### (c) 2016-2020 Volker Wiegand <volker.wiegand@cvw.de>
######               This file is part of "CVW Config"
######               See LICENSE for copyright information
######
#################################################################################

# Exit on error 
set -e -o pipefail

# Remember the args
_prog=${0##*/}
_args="$*"


function check_singleton
{
	if [[ -s /tmp/cvw.lock ]] ; then
		_pid=$(cat /tmp/cvw.lock)
		if kill -0 $_pid 2>/dev/null ; then
			echo "another cvw process is running (PID $_pid)" >&2
			exit 1
		fi
		rm -f /tmp/cvw.lock
	fi
	echo $$ >/tmp/cvw.lock || exit 1
	trap 'rm /tmp/cvw.lock' 0
}


function usage
{
	cat >&2 <<-EOF
		Syntax: $_prog -c [cmd [args]]   Run remote docker-compose
		    or: $_prog -d [cmd [args]]   Run remote docker
		    or: $_prog -e [-D] [i]       Execute config [debug] [info]
		    or: $_prog -E [-D] [i]       Execute with upgrade [debug] [info]
		    or: $_prog -f file [name]    Fetch <file> from server [local name]
		    or: $_prog -F [app]          Fetch most recent backup [for <app>]
		    or: $_prog -g app            Generate sceleton config for <app>
		    or: $_prog -G bits           Generate Diffie-Hellman group
		    or: $_prog -h                Generate and fetch RSA host keys
		    or: $_prog -H user           Generate and fetch RSA user keys
		    or: $_prog -j [4|6]          Ping the remote machine
		    or: $_prog -k [port]         Set remote SSH port in ~/.ssh/config
		    or: $_prog -K                Delete remote SSH port
		    or: $_prog -l [cmd]          Remote login as root
		    or: $_prog -L user [cmd]     Remote login as user
		    or: $_prog -p len            Generate random password
		    or: $_prog -P [-C]           Prepare for setup [copy SSH key]
		    or: $_prog -q app            Display URL for <app> update check
		    or: $_prog -r [svc]          Restart all or single service(s)
		    or: $_prog -t                Compile and test config.xml
		    or: $_prog -u [app]          Update (sync) remote app tree (e.g. CMS)
		    or: $_prog -x flag cmd       Run cvw_xml -flag cmd (verbose)
		    or: $_prog -X flag cmd       Run cvw_xml -flag cmd (only output)
		    or: $_prog -y                Archive and fetch /etc/opendkim
		    or: $_prog -Y                Archive and fetch /etc/letsencrypt
		    or: $_prog -z                Zap (delete) remote cvw_... commands
		Called with: '$_prog $_args'
	EOF
	exit 1
}


RSYNC_FLAGS="-az --delete --no-group --no-owner"
SSH_T_FLAGS="-o LogLevel=QUIET -t"


function failure
{
	echo "$_prog: $*" >&2
	exit 1
}


function finish
{
	[[ -s /tmp/cvw/error ]] || exit 0

	echo "=== Error ========" >&2
	cat /tmp/cvw/error >&2
	echo "==================" >&2
	exit 1
}


function combine_known_hosts
{
	local _dir=$HOME/.ssh
	local _hosts=$_dir/known_hosts
	local _file

	rm -f $_hosts.tmp_VW
	touch $_hosts

	find $_dir -name "host_*" -print | sort | while read _file ; do
		cat $_file >>$_hosts.tmp_VW
	done

	if [[ -s $_hosts.tmp_VW ]] ; then
		if cmp -s $_hosts $_hosts.tmp_VW ; then
			rm -f $_hosts.tmp_VW
		else
			mv -f $_hosts.tmp_VW $_hosts
		fi
	else
		rm -f $_hosts.tmp_VW $_hosts
	fi
	chmod 0600 $_hosts
}


function combine_ssh_configs
{
	local _dir=$HOME/.ssh
	local _conf=$_dir/config
	local _file

	rm -f $_conf.tmp_VW
	touch $_conf

	find $_dir -name "config_*" -print | sort | while read _file ; do
		cat $_file >>$_conf.tmp_VW
	done

	cat >>$_conf.tmp_VW <<-EOF
		# General settings
		Host *
		  Port 22
		  AddressFamily inet
		  ServerAliveInterval 10
		  HashKnownHosts no
		  ForwardAgent yes
		  ForwardX11 yes

	EOF

	if [[ -s $_conf.tmp_VW ]] ; then
		if cmp -s $_conf $_conf.tmp_VW ; then
			rm -f $_conf.tmp_VW
		else
			mv -f $_conf.tmp_VW $_conf
		fi

		echo ">>> $_conf"
		cat $_conf
		echo "<<<"
	else
		rm -f $_conf.tmp_VW $_conf
	fi
	chmod 0600 $_conf
}


function setup_config
{
	[[ -s config.in.xml ]] || failure "missing config.in.xml"
	[[ -d ../sbin       ]] || failure "missing ../sbin dir"
	[[ -d ../files      ]] || failure "missing ../files dir"

	[[ -z $1 ]] && echo "--> creating /tmp/cvw"
	rm -rf /tmp/cvw
	mkdir /tmp/cvw
	mkdir -p cfg

	[[ -z $1 ]] && echo "--> updating /usr/local/sbin"
	chmod 0755 ../sbin/cvw_*
	sudo rm -f /usr/local/sbin/cvw_*
	sudo rsync -a --no-owner --no-group ../sbin/ /usr/local/sbin 2>/tmp/cvw/error

	[[ -z $1 ]] && echo "--> updating /var/lib/cvw_cfg"
	xmllint --output cfg/config.xml --xinclude config.in.xml
	rsync -a ../files/ cfg/files
	sudo ln -nfs $(pwd)/cfg /var/lib/cvw_cfg 2>/tmp/cvw/error

	if [[ -d cvw ]] ; then
		[[ -z $1 ]] && echo "--> updating /var/lib/cvw_data"
		sudo rsync -a --delete --no-owner --no-group cvw/ /var/lib/cvw_data 2>/tmp/cvw/error
	fi

	[[ -z $1 ]] && echo "--> setting up access to host"
	_fqdn=$(cvw_xml -r host/fqdn)
	_domain=${_fqdn#*.}
	_addr=$(cvw_xml -r host/addr)
	[[ -s /tmp/cvw/error ]] && finish
	rm -f /tmp/cvw/error

	return 0
}


function copy_local_cvw
{
	[[ -d cvw ]] || failure "missing cvw subdir"
	local _addr=$(cvw_xml -r host/addr)

	cvw_say -a "rsync $_addr:/var/lib/cvw_data"
	sudo rsync -a --delete --no-owner --no-group cvw/ /var/lib/cvw_data 2>>/tmp/cvw/error
	rsync $RSYNC_FLAGS cvw/ root@$_addr:/var/lib/cvw_data 2>>/tmp/cvw/error
}


function copy_config
{
	local _addr=$(cvw_xml -r host/addr)

	[[ -z $1 ]] && cvw_say -a "rsync $_addr:/usr/local/sbin"
	rsync -az /usr/local/sbin/cvw_* root@$_addr:/usr/local/sbin

	[[ -z $1 ]] && cvw_say -a "rsync $_addr:/var/lib/cvw_cfg"
	chmod -R go-rwx cfg
	rsync $RSYNC_FLAGS --copy-links cfg/ root@$_addr:/var/lib/cvw_cfg

	if [[ -d ./cvw ]] ; then
		[[ -z $1 ]] && cvw_say -a "rsync $_addr:/var/lib/cvw_data"
		rsync $RSYNC_FLAGS cvw/ root@$_addr:/var/lib/cvw_data
	fi
}


function wipe_config
{
	local _addr=$(cvw_xml -r host/addr)

	[[ -z $1 ]] && cvw_say -a "remove remote CVW files"
	ssh $SSH_T_FLAGS root@$_addr "rm -rf /var/lib/cvw_cfg /var/lib/cvw_data /tmp/cvw /tmp/letsencrypt.tar.gz /tmp/opendkim.tar.gz"
}


while getopts ":cCdDeEf:Fg:G:hH:ijkKlL:p:Pq:r:tux:X:yYz" opt ; do
	_finito=""
	case $opt in
		c)
			_compose=1
			_finito=1
		;;

		C)
			_copy_key=1
		;;

		d)
			_docker=1
			_finito=1
		;;

		D)
			_debug="-d"
		;;

		e)
			_update=1
		;;

		E)
			_upgrade=1
		;;

		f)
			_fetch_file=$OPTARG
		;;

		F)
			_fetch_backup=1
			_finito=1
		;;

		g)
			_template=$OPTARG
			_finito=1
		;;

		G)
			if [[ $OPTARG == 1024 || $OPTARG == 2048 || $OPTARG == 4096 ]] ; then
				mkdir -p cfg/files/keys
				openssl dhparam -out cfg/files/keys/dh${OPTARG}_param.pem $OPTARG
			else
				failure "DH param must be 1024, 2048 or 4096"
			fi
			exit
		;;

		h)
			_gen_host_rsa=1
		;;

		H)
			_gen_user_rsa=$OPTARG
			_finito=1
		;;

		i)
			_info="-i"
		;;

		j)
			_ping=1
			_finito=1
		;;

		k)
			_add_ssh_port=1
		;;

		K)
			_del_ssh_port=1
		;;

		l)
			_root_login=1
		;;

		L)
			_user_login=$OPTARG
		;;

		p)
			openssl rand -base64 200 | tr -dc [:alnum:] | cut -c-$OPTARG
			exit
		;;

		P)
			_prepare=1
		;;

		q)
			_query_url=$OPTARG
			_finito=1
		;;

		r)
			_restart=$OPTARG
		;;

		t)
			setup_config
			exit
		;;

		u)
			_remote_update=1
		;;

		x)
			_run_xml=$OPTARG
		;;

		X)
			_run_XML=$OPTARG
		;;

		y)
			_opendkim=1
		;;

		Y)
			_lets_encrypt=1
		;;

		z)
			setup_config
			cvw_say -a "Remove /usr/local/sbin/cvw_... commands"
			sudo rm -rf /usr/local/sbin/cvw_*
			ssh $SSH_T_FLAGS root@$_addr "rm -rf /usr/local/sbin/cvw_*"
			exit
		;;

		\?)
			usage
		;;
	esac
	[[ $_finito -eq 1 ]] && break
done
shift $(($OPTIND-1))


if [[ $_template ]] ; then
	setup_config quiet
	rm -rf /tmp/cvw
	cvw_${_template#cvw_} -g
	exit
fi


if [[ $_query_url ]] ; then
	setup_config quiet
	rm -rf /tmp/cvw
	echo ""
	cvw_${_query_url#cvw_} -q
	echo ""
	exit
fi


if [[ $_compose ]] ; then
	_addr=$(cvw_xml -r host/addr)
	_cmd="$@"
	[[ -z $_cmd ]] && _cmd="help"
	cvw_say -a "docker-compose $_cmd"
	cvw_say
	ssh $SSH_T_FLAGS root@$_addr docker-compose "$_cmd"
	cvw_say
	exit
fi


if [[ $_docker ]] ; then
	_addr=$(cvw_xml -r host/addr)
	_cmd="$@"
	[[ -z $_cmd ]] && _cmd="ps -a"
	cvw_say -a "docker $_cmd"
	cvw_say
	ssh $SSH_T_FLAGS root@$_addr docker "$_cmd"
	cvw_say
	exit
fi


if [[ $_update ]] ; then
	check_singleton
	setup_config
	copy_config
	cvw_say -a "updating $_fqdn $_debug $_info"
	time ssh $SSH_T_FLAGS root@$_addr "cvw_boot $_debug $_info"
	exit
fi


if [[ $_upgrade ]] ; then
	check_singleton
	setup_config
	copy_config
	cvw_say -a "upgrading $_fqdn $_debug $_info"
	time ssh $SSH_T_FLAGS root@$_addr "cvw_boot -u $_debug $_info"
	exit
fi


if [[ $_root_login ]] ; then
	setup_config
	if [[ $# -ge 1 ]] ; then
		cvw_say -a "root@$_fqdn: '$@'"
		cvw_say
		ssh $SSH_T_FLAGS -X root@$_addr "$@"
	else
		copy_config
		cvw_say
		ssh $SSH_T_FLAGS -X root@$_addr
		wipe_config
	fi
	exit
fi


if [[ $_ping ]] ; then
	setup_config quiet
	if [[ $1 -eq 4 ]] ; then
		ping -4 $_fqdn
	elif [[ $1 -eq 6 ]] ; then
		ping -6 $_fqdn
	else
		ping $_fqdn
	fi
	exit
fi


if [[ $_user_login ]] ; then
	setup_config
	cvw_say
	if [[ $# -ge 1 ]] ; then
		cvw_say -a "$_user_login@$_fqdn: '$@'"
		ssh $SSH_T_FLAGS -X $_user_login@$_addr "$@"
	else
		ssh $SSH_T_FLAGS -X $_user_login@$_addr
	fi
	exit
fi


if [[ $_remote_update ]] ; then
	setup_config
	if [[ $# -ge 1 ]] ; then
		_apps="$*"
	else
		_apps="grav hugo picocms yellow"
	fi
	for _app in $_apps ; do
		[[ -d $_app ]] || continue
		cvw_say -a "rsync $_fqdn:/var/local/$_app/app"
		ssh  -t root@$_addr mkdir -p /var/local/$_app/app
		rsync -avz --no-group --no-owner $_app/ root@$_addr:/var/local/$_app/app 2>>/tmp/cvw/error
	done
	finish
fi


if [[ $_restart ]] ; then
	setup_config
	ssh $SSH_T_FLAGS root@$_addr "systemctl -t service stop $_restart"
	sleep 5
	ssh $SSH_T_FLAGS root@$_addr "systemctl -t service start $_restart"
	exit
fi


if [[ $_prepare ]] ; then
	setup_config
	cvw_say -a "setup current SSH keys for $_fqdn ($_addr)"

	if [[ -s $HOME/.ssh/known_hosts ]] ; then
		mv -f $HOME/.ssh/known_hosts $HOME/.ssh/known_hosts.tmp
	fi
	if [[ -n "$_copy_key" ]] ; then
		scp $HOME/.ssh/id_rsa.pub root@$_addr:/root/.ssh/authorized_keys
	fi
	cvw_say -a "check if my ssh key has been installed"
	ssh -t root@$_addr "cat /root/.ssh/authorized_keys"
	cvw_say
	mv -f $HOME/.ssh/known_hosts $HOME/.ssh/host_$_fqdn
	combine_known_hosts

	cvw_say -a "disable password login"
	ssh $SSH_T_FLAGS root@$_addr "sed -i -e '/^PasswordAuthentication/s/yes/no/' /etc/ssh/sshd_config"

	cvw_say -a "make sure scp is available"
	ssh $SSH_T_FLAGS root@$_addr "test -x /usr/bin/scp || yum install -q -y openssh-clients"
	cvw_say -a "make sure rsync is available"
	ssh $SSH_T_FLAGS root@$_addr "test -x /usr/bin/rsync || yum install -q -y rsync"
	cvw_say -a "make sure deltarpm is available"
	ssh $SSH_T_FLAGS root@$_addr "test -x /usr/bin/applydeltarpm || yum install -q -y deltarpm"
	cvw_say -a "make sure xmlstarlet is available"
	ssh $SSH_T_FLAGS root@$_addr "test -s /etc/yum.repos.d/epel.repo || yum install -q -y epel-release"
	ssh $SSH_T_FLAGS root@$_addr "rpmkeys --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7"
	ssh $SSH_T_FLAGS root@$_addr "test -x /usr/bin/xmlstarlet || yum install -q -y xmlstarlet"

	cvw_say -a "ready for install"
	exit 0
fi


if [[ $_fetch_file ]] ; then
	setup_config
	cvw_say -a "Fetch $_fetch_file from $_fqdn"
	if [[ $# -eq 0 ]] ; then
		_local="${_fetch_file##*/}"
	elif [[ $# -eq 1 ]] ; then
		_local="$1"
	else
		usage
	fi
	scp root@$_addr:$_fetch_file $_local
	exit
fi


if [[ $_fetch_backup ]] ; then
	setup_config quiet
	copy_config quiet
	if [[ $# -eq 0 ]] ; then
		cvw_say -a "Backups on $_fqdn"
		ssh $SSH_T_FLAGS root@$_addr "cd /var/local/backup && ls -1 | grep -v lost.found | sed 's/^/    --- cvw -F /'"
	else
		[[ $CVW_BACKUP ]] && _cvw_backup=$CVW_BACKUP/$_fqdn
		mkdir -p ${_cvw_backup:-backup}
		for _app in $* ; do
			cvw_say -a "Fetch last backup for $_app from $_fqdn"
			rsync -v $RSYNC_FLAGS root@$_addr:/var/local/backup/$_app/backup.0/ ${_cvw_backup:-backup}/$_app
		done
	fi
	wipe_config quiet
	exit
fi


if [[ $_gen_host_rsa ]] ; then
	setup_config quiet
	if [[ -s cfg/files/keys/id_rsa ]] ; then
		failure "cfg/files/keys/id_rsa exists"
	fi
	cvw_say -a "generate RSA host keys on $_addr"
	ssh $SSH_T_FLAGS root@$_addr "ssh-keygen"
	cvw_say -a "Fetch id_rsa{.pub} from $_addr"
	scp root@$_addr:/root/.ssh/id_rsa cfg/files/keys/id_rsa
	scp root@$_addr:/root/.ssh/id_rsa.pub cfg/files/keys/id_rsa.pub
	exit
fi


if [[ $_gen_user_rsa ]] ; then
	setup_config quiet
	if [[ -s cfg/files/keys/$_gen_user_rsa/id_rsa ]] ; then
		failure "cfg/files/keys/$_gen_user_rsa/id_rsa exists"
	fi
	cvw_say -a "generate RSA keys for $_gen_user_rsa on $_addr"
	ssh $SSH_T_FLAGS $_gen_user_rsa@$_addr "ssh-keygen -C '$_gen_user_rsa@$_domain' -N ''"
	cvw_say -a "Fetch id_rsa{.pub} for $_gen_user_rsa from $_addr"
	mkdir -p cfg/files/keys/$_gen_user_rsa
	scp $_gen_user_rsa@$_addr:.ssh/id_rsa cfg/files/keys/$_gen_user_rsa/id_rsa
	scp $_gen_user_rsa@$_addr:.ssh/id_rsa.pub cfg/files/keys/$_gen_user_rsa/id_rsa.pub
	exit
fi


if [[ $_add_ssh_port ]] ; then
	setup_config
	if [[ -n "$1" ]] ; then
		_ssh_port=$1
		_ssh_id_file="$HOME/.ssh/id_rsa"
	else
		_ssh_port=$(cvw_xml -r host/ssh_port)
		_ssh_id_file=$(cvw_xml -r host/ssh_id_file)
		[[ -s /tmp/cvw/error ]] && finish
	fi
	cat >$HOME/.ssh/config_$_fqdn <<-EOF
		# $_fqdn
		Host $_addr
		  Port $_ssh_port
		  IdentityFile $_ssh_id_file

	EOF
	combine_ssh_configs
	exit 0
fi


if [[ $_del_ssh_port ]] ; then
	setup_config
	rm -f $HOME/.ssh/config_$_fqdn
	combine_ssh_configs
	exit 0
fi


if [[ $_run_xml ]] ; then
	setup_config
	set +e
	echo "=== Output ======="
	cvw_xml -$_run_xml $@
	echo "=== $? ============"
	[[ -s /tmp/cvw/error ]] && cat /tmp/cvw/error
	exit 0
fi


if [[ $_run_XML ]] ; then
	setup_config quiet
	cvw_xml -$_run_XML $@
	exit
fi


if [[ $_opendkim ]] ; then
	setup_config
	copy_config
	cvw_say -a "securing OpenDKIM files"
	ssh $SSH_T_FLAGS root@$_addr "tar -c -v -z -f /tmp/opendkim.tar.gz -C /etc opendkim"
	scp root@$_addr:/tmp/opendkim.tar.gz cfg/files/misc/opendkim.tar.gz
	wipe_config
	ssh $SSH_T_FLAGS root@$_addr "cat /etc/opendkim/keys/default.txt"
	exit
fi


if [[ $_lets_encrypt ]] ; then
	setup_config
	copy_config
	cvw_say -a "securing letsencrypt files"
	ssh $SSH_T_FLAGS root@$_addr "tar -c -v -z -f /tmp/letsencrypt.tar.gz -C /etc letsencrypt"
	scp root@$_addr:/tmp/letsencrypt.tar.gz cfg/files/misc/letsencrypt.tar.gz
	wipe_config
	exit
fi


usage

